import os
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.enums import ParseMode
from dotenv import load_dotenv
import asyncpg
from cryptography.fernet import Fernet

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–µ–∫—Å—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
POLICY_TEXT = """
üìú *–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:*

1. –ú—ã —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
2. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.
3. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
"""

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class RegistrationStates(StatesGroup):
    POLICY = State()
    NAME = State()
    AGE = State()
    GENDER = State()
    LOCATION = State()
    PHOTOS = State()
    DESCRIPTION = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
async def connect_to_db():
    try:
        conn = await asyncpg.connect(
            user=os.getenv("DB_USER"),
            password=os.getenv("DB_PASSWORD"),
            database=os.getenv("DB_NAME"),
            host=os.getenv("DB_HOST"),
            port=os.getenv("DB_PORT")
        )
        logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return conn
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def save_user_to_db(user_data, telegram_id):
    conn = await connect_to_db()
    if conn:
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É User
            await conn.execute("""
                INSERT INTO users (
                    TelegramID, Name, Age, Gender, City, ProfileDescription,
                    SubscriptionStatus, ModerationStatus, VerificationStatus,
                    RegistrationDate, LastActionDate, ProfilePriorityCoefficient,
                    AccountStatus, Mail
                ) VALUES (
                    $1, $2, $3, $4, $5, $6,
                    $7, $8, $9,
                    $10, $11, $12,
                    $13, $14
                )
            """, telegram_id, user_data['name'], user_data['age'], user_data['gender'],
                user_data['location'], user_data['description'], False, False, False,
                datetime.now(), datetime.now(), 0.00, 'active', None)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É Photos
            for index, photo_id in enumerate(user_data['photos']):
                await conn.execute("""
                    INSERT INTO Photos (
                        UserTelegramID, PhotoFileID, PhotoDisplayOrder
                    ) VALUES (
                        $1, $2, $3
                    )
                """, telegram_id, photo_id, index + 1)

            logging.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
        finally:
            await conn.close()
    else:
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def is_user_registered(telegram_id):
    conn = await connect_to_db()
    if conn:
        try:
            result = await conn.fetchrow("""
                SELECT telegramid FROM users WHERE telegramid = $1
            """, telegram_id)
            return result is not None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
        finally:
            await conn.close()
    else:
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def start(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id

    if await is_user_registered(telegram_id):
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω"), KeyboardButton(text="‚ùå –Ø –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(POLICY_TEXT, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
    await state.set_state(RegistrationStates.POLICY)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π
async def confirm_policy(message: types.Message, state: FSMContext):
    user_response = message.text

    if user_response == "‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω":
        await message.answer("üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        await state.set_state(RegistrationStates.NAME)
    elif user_response == "‚ùå –Ø –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω":
        await message.answer("üö´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /start.")
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏
async def get_name(message: types.Message, state: FSMContext):
    f = Fernet(os.getenv("cryptography_key"))
    encrypted_name = f.encrypt(message.text.encode())
    await state.update_data(name=encrypted_name)
    await message.answer(f"üëã –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}! –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    await state.set_state(RegistrationStates.AGE)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
async def get_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        if age <= 18 or age > 100:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 100).")
        else:
            await state.update_data(age=age)
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π")]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            await message.answer("üéÇ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª.", reply_markup=keyboard)
            await state.set_state(RegistrationStates.GENDER)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª–∞
async def get_gender(message: types.Message, state: FSMContext):
    user_response = message.text

    if user_response in ["üë® –ú—É–∂—Å–∫–æ–π", "üë© –ñ–µ–Ω—Å–∫–∏–π"]:
        await state.update_data(gender=user_response)
        await message.answer("üìç –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, –≥–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ.")
        await state.set_state(RegistrationStates.LOCATION)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
async def get_location(message: types.Message, state: FSMContext):
    f = Fernet(os.getenv("cryptography_key"))
    encrypted_location = f.encrypt(message.text.encode())
    await state.update_data(location=encrypted_location)
    await message.answer("üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
    await state.set_state(RegistrationStates.PHOTOS)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async def get_photos(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    photos = user_data.get('photos', [])

    if message.photo:
        photo = message.photo[-1]
        photos.append(photo.file_id)
        await state.update_data(photos=photos)

        if len(photos) >= 3:
            await message.answer("‚úÖ –í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã.")
            await state.set_state(RegistrationStates.DESCRIPTION)
        else:
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ"), KeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            await message.answer(f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ {3 - len(photos)} —Ñ–æ—Ç–æ.", reply_markup=keyboard)
    else:
        if message.text == "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
            if len(photos) == 0:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")
            else:
                await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã.")
                await state.set_state(RegistrationStates.DESCRIPTION)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
async def get_description(message: types.Message, state: FSMContext):
    f = Fernet(os.getenv("cryptography_key"))
    encrypted_description = f.encrypt(message.text.encode())
    await state.update_data(description=encrypted_description)
    user_data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã
    profile_text = (
        f"üéâ *–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!*\n\n"
        f"üìù *–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:*\n"
        f"üë§ *–ò–º—è:* {f.decrypt(user_data['name']).decode()}\n"
        f"üìÖ *–í–æ–∑—Ä–∞—Å—Ç:* {user_data['age']}\n"
        f"üöª *–ü–æ–ª:* {user_data['gender']}\n"
        f"üìç *–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:* {f.decrypt(user_data['location']).decode()}\n"
        f"üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:* {f.decrypt(user_data['description']).decode()}\n\n"
        f"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
    )

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    media_group = []
    for index, photo_id in enumerate(user_data['photos']):
        if index == 0:
            media_group.append(InputMediaPhoto(media=photo_id, caption=profile_text, parse_mode=ParseMode.MARKDOWN))
        else:
            media_group.append(InputMediaPhoto(media=photo_id))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
    if media_group:
        await message.answer_media_group(media=media_group)
    else:
        await message.answer(profile_text, parse_mode=ParseMode.MARKDOWN)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    telegram_id = message.from_user.id
    if await save_user_to_db(user_data, telegram_id):
        await message.answer("‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def cancel(message: types.Message, state: FSMContext):
    await message.answer("üö´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(start, Command("start"))
    dp.message.register(confirm_policy, RegistrationStates.POLICY)
    dp.message.register(get_name, RegistrationStates.NAME)
    dp.message.register(get_age, RegistrationStates.AGE)
    dp.message.register(get_gender, RegistrationStates.GENDER)
    dp.message.register(get_location, RegistrationStates.LOCATION)
    dp.message.register(get_photos, RegistrationStates.PHOTOS)
    dp.message.register(get_description, RegistrationStates.DESCRIPTION)
    dp.message.register(cancel, Command("cancel"))

    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())