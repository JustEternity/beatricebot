from typing import List, Tuple, Optional
import logging

class CompatibilityService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ç–µ—Å—Ç"""
    
    def __init__(self, db):
        self.db = db
        self.logger = logging.getLogger(__name__)
    
    async def calculate_compatibility(self, user1_id: int, user2_id: int) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        
        Args:
            user1_id: ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user2_id: ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            float: –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (0-100)
        """
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user1_answers = await self.db.get_user_answers(user1_id)
        user2_answers = await self.db.get_user_answers(user2_id)
        
        if not user1_answers or not user2_answers:
            self.logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {user1_id} –∏/–∏–ª–∏ {user2_id}")
            return 0.0
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        total_questions = len(user1_answers)
        if total_questions == 0:
            return 0.0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        matches = 0
        for question_id in user1_answers:
            if question_id in user2_answers and user1_answers[question_id] == user2_answers[question_id]:
                matches += 1
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        compatibility = (matches / total_questions) * 100
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è)
        compatibility = await self._apply_preference_factors(user1_id, user2_id, compatibility)
        
        return compatibility
    
    async def _apply_preference_factors(self, user1_id: int, user2_id: int, base_compatibility: float) -> float:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∫ –±–∞–∑–æ–≤–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        Args:
            user1_id: ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user2_id: ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            base_compatibility: –ë–∞–∑–æ–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            
        Returns:
            float: –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user1_data = await self.db.get_user_data(user1_id)
        user2_data = await self.db.get_user_data(user2_id)
        
        if not user1_data or not user2_data:
            return base_compatibility
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É, –ø–æ–ª—É –∏ —Ç.–¥.
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–∞
        if user1_data.get('gender_preference') and user2_data.get('gender'):
            if user1_data['gender_preference'] != user2_data['gender']:
                return 0.0  # –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –ø–æ–ª—É
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
        if user1_data.get('age_min') and user1_data.get('age_max') and user2_data.get('age'):
            if user2_data['age'] < user1_data['age_min'] or user2_data['age'] > user1_data['age_max']:
                return base_compatibility * 0.7  # –°–Ω–∏–∂–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø—Ä–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        
        return base_compatibility
    
    async def find_compatible_users(self, user_id: int, limit: int = 10, min_score: float = 50.0) -> Tuple[List[Tuple[int, float]], List[Tuple[int, float]]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            min_score: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            
        Returns:
            Tuple[List[Tuple[int, float]], List[Tuple[int, float]]]: 
                –ö–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤:
                1. –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) —Å –≤—ã—Å–æ–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é (‚â•min_score)
                2. –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) —Å –Ω–∏–∑–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é (<min_score)
        """
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç
        all_users = await self.db.get_users_with_answers()
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        other_users = [u for u in all_users if u != user_id]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        high_compatibility_scores = []  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –≤—ã—Å–æ–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é (‚â•min_score)
        low_compatibility_scores = []   # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–∏–∑–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é (<min_score)
        
        for other_id in other_users:
            score = await self.calculate_compatibility(user_id, other_id)
            
            if score >= min_score:
                high_compatibility_scores.append((other_id, score))
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∏–∑–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é, –Ω–æ –Ω–µ –Ω–∏–∂–µ 20%
                if score >= 20.0:
                    low_compatibility_scores.append((other_id, score))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–∞ —Å–ø–∏—Å–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        high_compatibility_scores.sort(key=lambda x: x[1], reverse=True)
        low_compatibility_scores.sort(key=lambda x: x[1], reverse=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ–±–æ–∏—Ö —Å–ø–∏—Å–∫–æ–≤
        return high_compatibility_scores[:limit], low_compatibility_scores[:limit]

    
    async def get_compatibility_explanation(self, user1_id: int, user2_id: int) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        
        Args:
            user1_id: ID –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user2_id: ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user1_answers = await self.db.get_user_answers(user1_id)
        user2_answers = await self.db.get_user_answers(user2_id)
        
        if not user1_answers or not user2_answers:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        questions = await self.db.get_all_questions()
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ —Ä–∞–∑–ª–∏—á–∏—è
        matches = []
        differences = []
        
        for q_id, question in questions.items():
            if q_id in user1_answers and q_id in user2_answers:
                if user1_answers[q_id] == user2_answers[q_id]:
                    matches.append(question['text'])
                else:
                    differences.append(question['text'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        explanation = "–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:\n\n"
        
        if matches:
            explanation += "üü¢ –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤–æ –≤–∑–≥–ª—è–¥–∞—Ö:\n"
            for i, match in enumerate(matches[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                explanation += f"{i}. {match}\n"
            
            if len(matches) > 3:
                explanation += f"...–∏ –µ—â–µ {len(matches) - 3} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π\n"
        
        if differences:
            explanation += "\nüî¥ –†–∞–∑–ª–∏—á–∏—è –≤–æ –≤–∑–≥–ª—è–¥–∞—Ö:\n"
            for i, diff in enumerate(differences[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ä–∞–∑–ª–∏—á–∏—è
                explanation += f"{i}. {diff}\n"
            
            if len(differences) > 3:
                explanation += f"...–∏ –µ—â–µ {len(differences) - 3} —Ä–∞–∑–ª–∏—á–∏–π\n"
        
        return explanation
