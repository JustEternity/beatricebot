from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from bot.services.database import Database
from bot.services.utils import format_profile_text
from bot.keyboards.menus import compatible_navigation_keyboard, back_to_menu_button, create_like_keyboard
import logging

logger = logging.getLogger(__name__)
router = Router()

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_profile(
    message: Message, 
    user_id: int, 
    profile_data: dict, 
    photos: list, 
    keyboard, 
    crypto=None, 
    additional_text=""
):
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile_text = await format_profile_text(profile_data, crypto)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if additional_text:
            profile_text += additional_text
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
        if photos and len(photos) > 0:
            sent_message = await message.bot.send_photo(
                chat_id=user_id,
                photo=photos[0],
                caption=profile_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            sent_message = await message.bot.send_message(
                chat_id=user_id,
                text=profile_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        return sent_message
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}", exc_info=True)
        error_msg = await message.bot.send_message(
            chat_id=user_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=back_to_menu_button()
        )
        return error_msg

def decrypt_city(crypto, encrypted_city):
    """–î–µ—à–∏—Ñ—Ä—É–µ—Ç –≥–æ—Ä–æ–¥, –µ—Å–ª–∏ –æ–Ω –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω"""
    if not encrypted_city or encrypted_city == '–ù–µ –∑–∞–¥–∞–Ω' or not crypto:
        return encrypted_city
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥–æ—Ä–æ–¥ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º
        if isinstance(encrypted_city, bytes) or (
                isinstance(encrypted_city, str) and 
                (encrypted_city.startswith('b\'gAAAAA') or encrypted_city.startswith('gAAAAA'))):
            return crypto.decrypt(encrypted_city)
        return encrypted_city
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: {e}")
        return encrypted_city

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫
async def show_like_profile(message: Message, user_id: int, state: FSMContext, db: Database, crypto=None):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        current_index = state_data.get("current_like_index", 0)
        likes_list = state_data.get("likes_list", [])
        logger.debug(f"show_like_profile: index={current_index}, total likes={len(likes_list)}")
        
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ª–∞–π–∫–æ–≤ –ø—É—Å—Ç
        if not likes_list:
            await message.bot.send_message(
                chat_id=user_id,
                text="–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤.",
                reply_markup=back_to_menu_button()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—à–ª–∏ –ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞
        if current_index >= len(likes_list):
            current_index = 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–∞–π–∫
        current_like = likes_list[current_index]
        logger.debug(f"–¢–µ–∫—É—â–∏–π –ª–∞–π–∫: {current_like}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫
        liker_id = current_like.get('from_user_id') or current_like.get('sendertelegramid')
        if not liker_id:
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∞–π–∫–∞: {current_like}")
            await message.bot.send_message(
                chat_id=user_id,
                text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=back_to_menu_button()
            )
            return
        
        logger.debug(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –ª–∞–π–∫: {liker_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile = await db.get_user_profile(liker_id)
        user_photos = await db.get_user_photos(liker_id)
        
        if not user_profile:
            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
            likes_list.pop(current_index)
            await state.update_data(likes_list=likes_list)
            if not likes_list:
                await message.bot.send_message(
                    chat_id=user_id,
                    text="–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤.",
                    reply_markup=back_to_menu_button()
                )
                return
            await show_like_profile(message, user_id, state, db, crypto)
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"User profile keys: {list(user_profile.keys())}")
        logger.debug(f"is_verified in profile: {user_profile.get('is_verified')}")
        
        # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        if 'is_verified' not in user_profile:
            is_verified = await db.check_verify(liker_id)
            user_profile['is_verified'] = is_verified
            logger.debug(f"Added is_verified from check_verify: {is_verified}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = create_like_keyboard(liker_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
        sent_message = await show_profile(message, user_id, user_profile, user_photos, keyboard, crypto)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
        await state.update_data(last_like_message_id=sent_message.message_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è –ª–∞–π–∫–∞: {e}", exc_info=True)
        await message.bot.send_message(
            chat_id=user_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=back_to_menu_button()
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_compatible_user(message: Message, state: FSMContext, db: Database, crypto=None):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        current_index = state_data.get("current_compatible_index", 0)
        compatible_users = state_data.get("compatible_users", [])
        last_messages = state_data.get("last_profile_messages", [])
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg_id in last_messages:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")
        
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç –ø—É—Å—Ç
        if not compatible_users:
            no_profiles_msg = await message.answer(
                "üòî –°–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=back_to_menu_button()
            )
            await state.update_data(last_profile_messages=[no_profiles_msg.message_id])
            return
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        if current_index >= len(compatible_users):
            current_index = 0
        elif current_index < 0:
            current_index = len(compatible_users) - 1
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É
        current_user = compatible_users[current_index]
        user_profile = current_user['profile']
        compatibility = current_user['compatibility']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = user_profile['telegramid']
        is_verified = await db.check_verify(user_id)
        user_profile['is_verified'] = is_verified
        
        # –î–µ—à–∏—Ñ—Ä—É–µ–º –≥–æ—Ä–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –µ—Å–ª–∏ –æ–Ω –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω
        if 'location' in user_profile:
            user_profile['city'] = decrypt_city(crypto, user_profile['location'])
        
        # –°–æ–∑–¥–∞—ë–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = compatible_navigation_keyboard(
            user_id=user_profile['telegramid'],
            is_first=current_index == 0,
            is_last=current_index == len(compatible_users) - 1,
            is_initial=False  # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–µ–º False
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        additional_text = f"<b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</b> {compatibility}%"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
        photos = user_profile.get('photos', [])
        sent_message = await show_profile(
            message, 
            message.chat.id,
            user_profile,
            photos,
            keyboard,
            crypto,
            additional_text
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            last_profile_messages=[sent_message.message_id],
            current_compatible_index=current_index,
            current_profile_id=user_profile['telegramid'],
            is_initial_view=False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∫–∞–∑–∞
        )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_compatible_user: {e}", exc_info=True)
        error_msg = await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç—ã.",
            reply_markup=back_to_menu_button()
        )
        await state.update_data(last_profile_messages=[error_msg.message_id])