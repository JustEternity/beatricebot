import logging
from typing import List, Optional, Union
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext

logger = logging.getLogger(__name__)

async def delete_previous_messages(
    source: Union[Message, CallbackQuery],
    state: FSMContext
) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —á–∞—Ç–∞"""
    try:
        data = await state.get_data()
        if 'last_menu_message_id' in data:
            await source.bot.delete_message(
                chat_id=source.from_user.id,
                message_id=data['last_menu_message_id']
            )
        if 'profile_photo_message_ids' in data:
            for msg_id in data['profile_photo_message_ids']:
                await source.bot.delete_message(
                    chat_id=source.from_user.id,
                    message_id=msg_id
                )
    except Exception as e:
        logger.error(f"Error deleting messages: {e}")

def validate_age(age_str: str) -> Optional[int]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(age_str)
        return age if 18 <= age <= 100 else None
    except ValueError:
        return None

async def format_profile_text(user_data: dict, crypto) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    decrypted_data = {}
    for field in ['name', 'location', 'description']:
        if isinstance(user_data[field], bytes):
            decrypted_data[field] = crypto.decrypt(user_data[field])
        else:
            decrypted_data[field] = user_data[field]

    return (
        f"üë§ *–ò–º—è:* {decrypted_data['name']}\n"
        f"üéÇ *–í–æ–∑—Ä–∞—Å—Ç:* {user_data['age']}\n"
        f"üöª *–ü–æ–ª:* {user_data['gender']}\n"
        f"üìç *–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:* {decrypted_data['location']}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {decrypted_data['description']}"
    )

def handle_errors(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            logger.error(f"Error in {func.__name__}: {e}")
            message = next((a for a in args if isinstance(a, (Message, CallbackQuery))), None)
            if message:
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return wrapper

def create_media_group(photo_ids: List[str], caption: str) -> List[InputMediaPhoto]:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    if not photo_ids:
        return []

    return [
        InputMediaPhoto(
            media=photo_id,
            caption=caption if i == 0 else None,
            parse_mode="Markdown"
        ) for i, photo_id in enumerate(photo_ids)
    ]