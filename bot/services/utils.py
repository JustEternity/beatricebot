import logging
from typing import List, Optional, Union, Dict
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext

logger = logging.getLogger(__name__)

async def delete_previous_messages(
    source: Union[Message, CallbackQuery],
    state: FSMContext
) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —á–∞—Ç–∞"""
    try:
        data = await state.get_data()
        if 'last_menu_message_id' in data:
            await source.bot.delete_message(
                chat_id=source.from_user.id,
                message_id=data['last_menu_message_id']
            )
        if 'profile_photo_message_ids' in data:
            for msg_id in data['profile_photo_message_ids']:
                await source.bot.delete_message(
                    chat_id=source.from_user.id,
                    message_id=msg_id
                )
    except Exception as e:
        logger.error(f"Error deleting messages: {e}")

def validate_age(age_str: str) -> Optional[int]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(age_str)
        return age if 18 <= age <= 100 else None
    except ValueError:
        return None

async def format_profile_text(user_data: Dict, crypto=None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ crypto –Ω–µ None
        if crypto is None:
            logger.warning("Crypto object is None in format_profile_text")
            decrypted_data = user_data.copy()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å
        else:
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            decrypted_data = user_data.copy()
            encrypted_fields = ['name', 'about', 'interests', 'city']
            for field in encrypted_fields:
                if field in user_data and user_data[field] is not None:
                    try:
                        decrypted_data[field] = crypto.decrypt(user_data[field])
                    except Exception as e:
                        logger.error(f"Error decrypting field {field}: {e}")
                        decrypted_data[field] = user_data[field]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = f"üë§ <b>{decrypted_data.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b>, {decrypted_data.get('age', '?')} –ª–µ—Ç\n"
        profile_text += f"üèôÔ∏è {decrypted_data.get('city', '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        
        if decrypted_data.get('about'):
            profile_text += f"<b>–û —Å–µ–±–µ:</b>\n{decrypted_data.get('about')}\n\n"
        
        if decrypted_data.get('interests'):
            profile_text += f"<b>–ò–Ω—Ç–µ—Ä–µ—Å—ã:</b>\n{decrypted_data.get('interests')}\n\n"
        
        if decrypted_data.get('gender') is not None:
            gender = "–ú—É–∂—Å–∫–æ–π" if decrypted_data.get('gender') == 0 else "–ñ–µ–Ω—Å–∫–∏–π"
            profile_text += f"<b>–ü–æ–ª:</b> {gender}\n"
        
        if decrypted_data.get('looking_for') is not None:
            looking_for = "–ú—É–∂—á–∏–Ω" if decrypted_data.get('looking_for') == 0 else "–ñ–µ–Ω—â–∏–Ω"
            profile_text += f"<b>–ò—â–µ—Ç:</b> {looking_for}\n"
        
        return profile_text
    except Exception as e:
        logger.error(f"Error formatting profile text: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"


def handle_errors(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            logger.error(f"Error in {func.__name__}: {e}")
            message = next((a for a in args if isinstance(a, (Message, CallbackQuery))), None)
            if message:
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return wrapper

def create_media_group(photo_ids: List[str], caption: str) -> List[InputMediaPhoto]:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    if not photo_ids:
        return []

    return [
        InputMediaPhoto(
            media=photo_id,
            caption=caption if i == 0 else None,
            parse_mode="Markdown"
        ) for i, photo_id in enumerate(photo_ids)
    ]