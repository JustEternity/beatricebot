import logging
from typing import List, Optional, Union, Dict
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext

logger = logging.getLogger(__name__)

async def delete_previous_messages(message, state):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞"""
    try:
        data = await state.get_data()
        message_ids = data.get('message_ids', [])
        
        if not message_ids:
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        deleted_count = 0
        for msg_id in message_ids:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
                deleted_count += 1
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ DEBUG, –∞ –Ω–µ ERROR
                logger.debug(f"Could not delete message {msg_id}: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        await state.update_data(message_ids=[])
        logger.debug(f"Deleted {deleted_count}/{len(message_ids)} messages")
    except Exception as e:
        logger.debug(f"Error in delete_previous_messages: {e}")

def validate_age(age_str: str) -> Optional[int]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(age_str)
        return age if 18 <= age <= 100 else None
    except ValueError:
        return None

async def format_profile_text(user_data: Dict, crypto=None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.debug(f"Formatting profile with keys: {list(user_data.keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ crypto –Ω–µ None
        if crypto is None:
            logger.warning("Crypto object is None in format_profile_text")
            decrypted_data = user_data.copy()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å
        else:
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            decrypted_data = user_data.copy()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã
            encrypted_fields = ['name', 'about', 'interests', 'city', 'location', 'description']
            
            for field in encrypted_fields:
                if field in user_data and user_data[field] is not None:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–π—Ç–∞–º–∏ (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
                        if isinstance(user_data[field], bytes):
                            decrypted_data[field] = crypto.decrypt(user_data[field])
                        else:
                            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –±–∞–π—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                            decrypted_data[field] = user_data[field]
                    except Exception as e:
                        logger.error(f"Error decrypting field {field}: {e}")
                        decrypted_data[field] = user_data[field]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = f"üë§ <b>{decrypted_data.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b>, {decrypted_data.get('age', '?')} –ª–µ—Ç\n"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'location' –∏–ª–∏ 'city' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ
        location = decrypted_data.get('location') or decrypted_data.get('city', '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω')
        profile_text += f"üèôÔ∏è {location}\n\n"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'description' –∏–ª–∏ 'about' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ
        description = decrypted_data.get('description') or decrypted_data.get('about')
        if description:
            profile_text += f"<b>–û —Å–µ–±–µ:</b>\n{description}\n\n"
        
        if decrypted_data.get('interests'):
            profile_text += f"<b>–ò–Ω—Ç–µ—Ä–µ—Å—ã:</b>\n{decrypted_data.get('interests')}\n\n"
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        gender_value = decrypted_data.get('gender')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –ø–æ–ª
        if gender_value == '0' or gender_value == 0:
            gender_display = "üë® –ú—É–∂—Å–∫–æ–π"
        elif gender_value == '1' or gender_value == 1:
            gender_display = "üë© –ñ–µ–Ω—Å–∫–∏–π"
        else:
            gender_display = "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        profile_text += f"<b>–ü–æ–ª:</b> {gender_display}\n"
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        looking_for = decrypted_data.get('looking_for')
        if looking_for is not None:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if str(looking_for) == '0' or looking_for == 0:
                looking_for_display = "üë® –ú—É–∂—á–∏–Ω"
            else:
                looking_for_display = "üë© –ñ–µ–Ω—â–∏–Ω"
            
            profile_text += f"<b>–ò—â–µ—Ç:</b> {looking_for_display}\n"
        
        return profile_text
    except Exception as e:
        logger.error(f"Error formatting profile text: {e}")
        logger.exception(e)
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"
    
def standardize_gender(gender_value):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∞ –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É: '0' - –º—É–∂—Å–∫–æ–π, '1' - –∂–µ–Ω—Å–∫–∏–π"""
    logger.debug(f"Standardizing gender value: {gender_value}, type: {type(gender_value)}")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Å—Ç—Ä–æ—á–Ω—ã–º –±—É–∫–≤–∞–º, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    if isinstance(gender_value, str):
        gender_value = gender_value.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞
    if gender_value in [0, '0', 'male', '–º', '–º—É–∂—Å–∫–æ–π', '–º—É–∂—á–∏–Ω–∞', 'üë® –º—É–∂—Å–∫–æ–π']:
        return '0'  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É
    else:
        return '1'  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É

def handle_errors(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            logger.error(f"Error in {func.__name__}: {e}")
            message = next((a for a in args if isinstance(a, (Message, CallbackQuery))), None)
            if message:
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return wrapper

def create_media_group(photo_ids: List[str], caption: str) -> List[InputMediaPhoto]:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    if not photo_ids:
        return []

    return [
        InputMediaPhoto(
            media=photo_id,
            caption=caption if i == 0 else None,
            parse_mode="Markdown"
        ) for i, photo_id in enumerate(photo_ids)
    ]