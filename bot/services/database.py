from decimal import Decimal

import json
import asyncpg
import logging
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Union, Tuple
from bot.models.user import UserDB
from bot.services.utils import standardize_gender
from bot.services.notifications import send_match_notification

logger = logging.getLogger(__name__)

class Database:
    def __init__(self, config):
        self.config = config
        self.pool: Optional[asyncpg.Pool] = None

    async def connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("Connecting to database...")
        try:
            self.pool = await asyncpg.create_pool(
                user=self.config.db_user,
                password=self.config.db_pass,
                database=self.config.db_name,
                host=self.config.db_host,
                port=self.config.db_port
            )
            logger.info("‚úÖ Successfully connected to database")
            logger.debug(f"Connection params: "
                        f"host={self.config.db_host}, "
                        f"port={self.config.db_port}, "
                        f"dbname={self.config.db_name}, "
                        f"user={self.config.db_user}")
        except Exception as e:
            logger.critical("‚ùå Database connection failed")
            logger.exception(e)
            raise

    async def is_user_registered(self, telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.debug(f"Checking registration for user {telegram_id}")
        async with self.pool.acquire() as conn:
            try:
                result = await conn.fetchrow(
                    "SELECT telegramid FROM users WHERE telegramid = $1",
                    telegram_id
                )
                logger.debug(f"User {telegram_id} registered: {bool(result)}")
                return result is not None
            except Exception as e:
                logger.error(f"Error checking registration for {telegram_id}")
                logger.exception(e)
                return False

    async def save_user(self, telegram_id: int, user_data: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"Saving user {telegram_id}")
        try:
            async with self.pool.acquire() as conn:
                # –õ–æ–≥–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                logger.debug(f"User data: { {k: v for k, v in user_data.items() if k != 'photos'} }")
                logger.debug(f"Photos count: {len(user_data['photos'])}")

                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∞
                gender_value = user_data['gender']
                logger.debug(f"Original gender value: {gender_value}, type: {type(gender_value)}")

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Å—Ç—Ä–æ—á–Ω—ã–º –±—É–∫–≤–∞–º, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                if isinstance(gender_value, str):
                    gender_value = gender_value.lower()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞
                if gender_value in [0, '0', 'male', '–º', '–º—É–∂—Å–∫–æ–π', '–º—É–∂—á–∏–Ω–∞', 'üë® –º—É–∂—Å–∫–æ–π']:
                    standardized_gender = '0'  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                    logger.debug("Standardized to male ('0')")
                else:
                    standardized_gender = '1'  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                    logger.debug("Standardized to female ('1')")

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                await conn.execute("""
                    INSERT INTO users (
                        telegramid, name, age, gender, city,
                        profiledescription, registrationdate, lastactiondate
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
                """, telegram_id, user_data['name'], user_data['age'],
                    standardized_gender, user_data['location'],
                    user_data['description'], datetime.now(), datetime.now())

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è —Å –ü–ö
                await conn.execute("""
                    INSERT INTO consenttopdp (usertelegramid, policyversionid, consentstatus)
                    VALUES ($1, $2, $3)
                """, telegram_id, user_data['idpolicy'], user_data['policy'])

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                for index, photo_info in enumerate(user_data['photos']):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º file_id –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–æ—Ç–æ
                    photo_id = photo_info['file_id'] if isinstance(photo_info, dict) else photo_info
                    logger.debug(f"Processing photo {index + 1}: {photo_info}")
                    logger.debug(f"Extracted file_id: {photo_id}")

                    await conn.execute("""
                        INSERT INTO photos
                        (usertelegramid, photourl, photofileid, photodisplayorder)
                         VALUES ($1, $2, $3, $4)
                     """,
                     telegram_id,
                     photo_info['s3_url'],   # URL —Ñ–æ—Ç–æ
                     photo_info['file_id'],  # Telegram file ID
                     index)                  # –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ)

                logger.info(f"‚úÖ User {telegram_id} saved successfully")
                return True
        except Exception as e:
            logger.error(f"‚ùå Error saving user {telegram_id}")
            logger.exception(e)
            return False

    async def get_user_data(self, telegram_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.debug(f"Fetching data for user {telegram_id}")
        async with self.pool.acquire() as conn:
            try:
                user = await conn.fetchrow(
                    "SELECT * FROM users WHERE telegramid = $1",
                    telegram_id
                )
                photos = await conn.fetch(
                    "SELECT photofileid FROM photos WHERE usertelegramid = $1 "
                    "ORDER BY photodisplayorder",
                    telegram_id
                )

                if not user:
                    logger.warning(f"User {telegram_id} not found in database")
                    return None

                return {
                    'name': user['name'],
                    'age': user['age'],
                    'gender': user['gender'],
                    'location': user['city'],
                    'description': user['profiledescription'],
                    'photos': [p['photofileid'] for p in photos] if photos else []
                }
            except Exception as e:
                logger.error(f"Error getting data for user {telegram_id}: {e}")
                return None

    async def save_policy_acception(self, telegram_id: int, user_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è —Å –ü–ö (–ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏)"""
        logger.info(f"Updating user {telegram_id} policy acception")
        async with self.pool.acquire() as conn:
            try:
                await conn.execute("""
                            INSERT INTO consenttopdp (usertelegramid, policyversionid, consentstatus)
                            VALUES ($1, $2, $3)
                        """, telegram_id, user_data['idpolicy'], user_data['policy'])
                return True
            except Exception as e:
                logger.error(f"‚ùå Error saving user {telegram_id} policy acception")
                logger.exception(e)
                return False

    async def update_user_field(self, telegram_id: int, **fields) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"Updating user {telegram_id} fields: {', '.join(fields.keys())}")
        async with self.pool.acquire() as conn:
            try:
                updates = []
                values = [telegram_id, datetime.now()]  # –ù–∞—á–∏–Ω–∞–µ–º —Å —ç—Ç–∏—Ö –¥–≤—É—Ö –∑–Ω–∞—á–µ–Ω–∏–π

                for idx, (field, value) in enumerate(fields.items(), start=3):  # –ù–∞—á–∏–Ω–∞–µ–º —Å $3
                    updates.append(f"{field} = ${idx}")
                    values.append(value)
                    logger.debug(f"Setting {field} = {value}")

                query = f"""
                    UPDATE users
                    SET {', '.join(updates)}, lastactiondate = $2
                    WHERE telegramid = $1
                """

                result = await conn.execute(query, *values)  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è

                if await self.check_user_subscription(telegram_id) and not await self.check_active_moders(telegram_id):
                    await conn.execute(
                            "INSERT INTO moderations (usertelegramid) VALUES ($1)",
                            telegram_id
                        )
                logger.info(f"‚úÖ Updated user {telegram_id}. Result: {result}")
                return True
            except Exception as e:
                logger.error(f"‚ùå Error updating user {telegram_id}")
                logger.exception(e)
                return False

    async def check_active_moders(self, user_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.pool.acquire() as conn:
            try:
                query = """SELECT EXISTS (
                            SELECT 1
                            FROM moderations
                            WHERE usertelegramid = $1
                            AND processingstatus = 'open'
                            LIMIT 1
                        );"""
                result = await conn.execute(query, user_id)
                if result:
                    logger.info(f'User {user_id} have open moders')
                    return True
                else:
                    logger.info(f'User {user_id} dont have open moders')
                    return False
            except Exception as e:
                logger.error(f"‚ùå Error checking moders for user {user_id}")
                logger.exception(e)
                return True

    async def update_user_photos(
        self,
        usertelegramid: str,
        photos: List[dict]  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫
    ) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π S3"""
        logger.info(f"Updating photos for user {usertelegramid}")

        async with self.pool.acquire() as conn:
            async with conn.transaction():  # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                try:
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ
                    delete_result = await conn.execute(
                        "DELETE FROM photos WHERE usertelegramid = $1",
                        usertelegramid
                    )
                    logger.debug(f"Deleted {delete_result.split()[-1]} old photos")

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ —Å S3 URL
                    for index, photo_data in enumerate(photos):
                        await conn.execute(
                            """INSERT INTO photos
                            (usertelegramid, photofileid, photourl, photodisplayorder)
                            VALUES ($1, $2, $3, $4)""",
                            usertelegramid,
                            photo_data["file_id"],
                            photo_data["s3_url"],
                            index + 1
                        )

                    logger.info(f"‚úÖ Added {len(photos)} photos with S3 URLs for user {usertelegramid}")
                    if self.check_user_subscription(usertelegramid) and not self.check_active_moders(usertelegramid):
                        await conn.execute(
                                "INSERT INTO moderations (usertelegramid) VALUES ($1)",
                                usertelegramid
                            )
                    return True

                except Exception as e:
                    logger.error(f"‚ùå Error updating photos for user {usertelegramid}: {str(e)}")
                    return False

    async def get_questions_and_answers(self) -> tuple[Dict, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞"""
        logger.info("Fetching questions and answers")
        async with self.pool.acquire() as conn:
            try:
                questions = await conn.fetch(
                    "SELECT questionid, questiontext FROM questions"
                )
                answers = await conn.fetch(
                    "SELECT answerid, questionid, answertext FROM answers"
                )

                logger.debug(f"Loaded {len(questions)} questions and {len(answers)} answers")

                # –°–ª–æ–≤–∞—Ä—å –≤–æ–ø—Ä–æ—Å–æ–≤
                questions_dict = {
                    q['questionid']: q['questiontext'] for q in questions
                }

                # –°–ª–æ–≤–∞—Ä—å –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
                answers_dict = {}
                for a in answers:
                    question_id = a['questionid']
                    answer_id = a['answerid']
                    answer_text = a['answertext']

                    if question_id not in answers_dict:
                        answers_dict[question_id] = {}

                    answers_dict[question_id][answer_id] = answer_text

                return questions_dict, answers_dict

            except Exception as e:
                logger.error("‚ùå Error loading questions and answers")
                logger.exception(e)
                return {}, {}

    async def save_user_answers(self, telegram_id: int, answers: Dict[int, int]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
        logger.info(f"Saving test answers for user {telegram_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_exists = await self.is_user_registered(telegram_id)
        if not user_exists:
            logger.error(f"Cannot save answers: User {telegram_id} is not registered")
            return False

        async with self.pool.acquire() as conn:
            try:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã
                await conn.execute(
                    "DELETE FROM useranswers WHERE usertelegramid = $1",
                    telegram_id
                )
                logger.debug(f"Deleted previous answers for {telegram_id}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ
                for question_id, answer_id in answers.items():
                    await conn.execute("""
                        INSERT INTO useranswers
                        (usertelegramid, questionid, answerid)
                        VALUES ($1, $2, $3)
                    """, telegram_id, question_id, answer_id)

                logger.info(f"‚úÖ Saved {len(answers)} answers for user {telegram_id}")
                return True
            except Exception as e:
                logger.error(f"‚ùå Error saving answers for user {telegram_id}")
                logger.exception(e)
                return False

    async def check_existing_answers(self, user_id: int) -> bool:
        logger.debug(f"Checking existing answers for user {user_id}")
        async with self.pool.acquire() as conn:
            try:
                result = await conn.fetchval(
                    "SELECT EXISTS(SELECT 1 FROM useranswers WHERE usertelegramid = $1)",
                    user_id
                )
                logger.debug(f"User {user_id} has answers: {result}")
                return result
            except Exception as e:
                logger.error(f"Error checking answers for user {user_id}")
                logger.exception(e)
                return False

    async def get_user(self, telegram_id: int) -> Optional[UserDB]:
        async with self.pool.acquire() as conn:
            return await conn.fetchrow(
                "SELECT * FROM users WHERE telegramid = $1",
                telegram_id
            )

    async def update_profile_field(self, user_id: int, field: str, value: Union[str, int, bytes]) -> bool:
            try:
                async with self.pool.acquire() as conn:
                    await conn.execute(
                        f"UPDATE users SET {field} = $1 WHERE telegramid = $2",
                        value, user_id
                    )
                    return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è: {e}")
                return False

    async def del_user_answers(self, telegram_id: int) -> bool:
        async with self.pool.acquire() as conn:
            try:
                await conn.execute(
                    "DELETE FROM useranswers WHERE usertelegramid = $1",
                    telegram_id
                )
                return True
            except Exception as e:
                logger.error(f"Error deleting user answers: {e}")
                logger.exception(e)
                return False

    async def get_user_answers(self, user_id: int) -> Dict[int, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ—Å—Ç"""
        logger.debug(f"Fetching answers for user {user_id}")
        async with self.pool.acquire() as conn:
            try:
                rows = await conn.fetch(
                    "SELECT questionid, answerid FROM useranswers WHERE usertelegramid = $1",
                    user_id
                )

                answers = {row['questionid']: row['answerid'] for row in rows}
                logger.debug(f"Found {len(answers)} answers for user {user_id}")
                return answers
            except Exception as e:
                logger.error(f"Error getting answers for user {user_id}: {e}")
                return {}

    async def get_answer_weights(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Å–∞ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –≤–æ–ø—Ä–æ—Å–æ–≤
            query = "SELECT questionid FROM questions"
            result = await self.execute_query(query)

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –≤–µ—Å–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (1.0) –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            weights = {row[0]: 1.0 for row in result} if result else {}

            logger.debug(f"Using default weights for {len(weights)} questions")
            return weights
        except Exception as e:
            logger.error(f"Error getting question IDs: {e}")
            return {}

    async def get_users_with_answers(self, exclude_user_id: int = None) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç"""
        logger.debug(f"Fetching users with test answers (excluding {exclude_user_id})")
        async with self.pool.acquire() as conn:
            try:
                query = """
                    SELECT DISTINCT usertelegramid
                    FROM useranswers
                """

                params = []
                if exclude_user_id is not None:
                    query += " WHERE usertelegramid != $1"
                    params.append(exclude_user_id)

                rows = await conn.fetch(query, *params)

                user_ids = [row['usertelegramid'] for row in rows]
                logger.debug(f"Found {len(user_ids)} users with answers")
                return user_ids
            except Exception as e:
                logger.error(f"Error getting users with answers: {e}")
                return []

    async def check_user_has_test(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        logger.debug(f"Checking if user {user_id} has completed the test")
        async with self.pool.acquire() as conn:
            try:
                result = await conn.fetchval(
                    "SELECT COUNT(*) FROM useranswers WHERE usertelegramid = $1",
                    user_id
                )
                return result > 0
            except Exception as e:
                logger.error(f"Error checking test completion for user {user_id}: {e}")
                return False

    async def get_compatible_users(self, user_id: int, limit: int = 20) -> List[Tuple[int, float]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.debug(f"Finding compatible users for user {user_id}")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_answers = await self.get_user_answers(user_id)
            if not user_answers:
                logger.warning(f"User {user_id} has no answers")
                return []

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç
            other_users = await self.get_users_with_answers(exclude_user_id=user_id)
            logger.debug(f"Found {len(other_users)} other users with answers")
            if not other_users:
                logger.warning("No other users with answers found")
                return []

            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å–∞ –æ—Ç–≤–µ—Ç–æ–≤
            weights = await self.get_answer_weights()

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            compatible_users = []
            for other_id in other_users:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                other_answers = await self.get_user_answers(other_id)
                if not other_answers:
                    logger.warning(f"User {other_id} has no answers")
                    continue

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                compatibility = self._calculate_compatibility(user_answers, other_answers, weights)

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞
                if compatibility > 30:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    compatible_users.append((other_id, compatibility))

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–æ—Ç –≤—ã—Å–æ–∫–æ–π –∫ –Ω–∏–∑–∫–æ–π)
            compatible_users.sort(key=lambda x: x[1], reverse=True)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            return compatible_users[:limit]

        except Exception as e:
            logger.error(f"Error finding compatible users: {e}")
            logger.exception(e)
            return []

    def _calculate_compatibility(self, user1_answers: Dict[int, int], user2_answers: Dict[int, int], weights: Dict[int, Dict[int, float]]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            total_questions = len(set(user1_answers.keys()) & set(user2_answers.keys()))
            if total_questions == 0:
                return 0.0

            compatibility_score = 0.0

            for question_id in set(user1_answers.keys()) & set(user2_answers.keys()):
                answer1 = user1_answers[question_id]
                answer2 = user2_answers[question_id]

                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –≤–µ—Å
                if answer1 == answer2:
                    weight = weights.get(question_id, {}).get(answer1, 1.0)
                    compatibility_score += weight
                else:
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã —Ä–∞–∑–Ω—ã–µ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                    # –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–ª–∏–∑–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
                    pass

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            compatibility_percent = (compatibility_score / total_questions) * 100
            return compatibility_percent

        except Exception as e:
            logger.error(f"Error calculating compatibility: {e}")
            return 0.0

    async def get_user_profile(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.pool.acquire() as conn:
                query = """
                    SELECT u.telegramid, u.name, u.age, u.gender, u.city, u.profiledescription,
                        EXISTS(
                            SELECT 1
                            FROM verifications v
                            WHERE v.usertelegramid = u.telegramid
                            AND v.processingstatus = 'approved'
                        ) as is_verified
                    FROM users u
                    WHERE u.telegramid = $1
                """
                result = await conn.fetchrow(query, user_id)
                if result:
                    return dict(result)
                return None
        except Exception as e:
            logger.error(f"Error getting user profile for {user_id}: {e}")
            return None

    async def get_user_photos(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.pool.acquire() as conn:
                query = """
                SELECT photofileid, photourl
                FROM photos
                WHERE usertelegramid = $1
                ORDER BY photodisplayorder
                """
                rows = await conn.fetch(query, user_id)

                # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                photos = [row['photofileid'] for row in rows] if rows else []
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                for i, photo in enumerate(photos):
                    logger.debug(f"–§–æ—Ç–æ {i+1}: {photo[:30]}...")

                return photos
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []

    async def add_like(self, from_user_id, to_user_id, bot=None, crypto=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ª–∞–π–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å"""
        try:
            logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∞–π–∫–∞ –æ—Ç {from_user_id} –∫ {to_user_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ª–∞–π–∫
            like_exists = await self.check_like_exists(from_user_id, to_user_id)
            logger.info(f"–õ–∞–π–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {like_exists}")

            if like_exists:
                return like_exists

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞—Ç–Ω—ã–π –ª–∞–π–∫
            reverse_like_exists = await self.check_like_exists(to_user_id, from_user_id)
            logger.info(f"–û–±—Ä–∞—Ç–Ω—ã–π –ª–∞–π–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {reverse_like_exists}")

            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
            query = """
            INSERT INTO likes (sendertelegramid, receivertelegramid, likeviewedstatus)
            VALUES ($1, $2, FALSE)
            RETURNING likeid
            """
            like_id = await self.pool.fetchval(query, from_user_id, to_user_id)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ª–∞–π–∫ ID: {like_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å
            mutual_like = reverse_like_exists is not None
            logger.info(f"–í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫: {mutual_like}")

            if bot is None:
                logger.error("Bot object is None! Cannot send notifications")
                return like_id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –æ–±—ä–µ–∫—Ç crypto
            if crypto is None:
                logger.warning("Crypto object is None! Names will not be decrypted properly")

            if mutual_like:
                logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ")
                from bot.services.notifications import send_match_notification
                # –ü–µ—Ä–µ–¥–∞–µ–º crypto –≤ —Ñ—É–Ω–∫—Ü–∏—é send_match_notification
                await send_match_notification(bot, from_user_id, to_user_id, self, crypto)
                await self.delete_mutual_likes(from_user_id, to_user_id)
            else:
                logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–µ")
                from bot.services.notifications import send_like_notification
                # –ü–µ—Ä–µ–¥–∞–µ–º crypto –≤ —Ñ—É–Ω–∫—Ü–∏—é send_like_notification
                await send_like_notification(bot, from_user_id, to_user_id, self, crypto)

            return like_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ add_like: {e}", exc_info=True)
            return None

    async def check_mutual_like(self, user_id: int, liked_user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–∞–π–∫ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            reverse_like = await self.check_like_exists(liked_user_id, user_id)
            return reverse_like is not None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞: {e}")
            return False

    async def get_mutual_likes(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –µ—Å—Ç—å –≤–∑–∞–∏–º–Ω—ã–µ –ª–∞–π–∫–∏"""
        try:
            async with self.pool.acquire() as conn:
                query = """
                SELECT u.* FROM users u
                WHERE u.telegramid IN (
                    SELECT l1.sendertelegramid FROM likes l1
                    JOIN likes l2 ON l1.sendertelegramid = l2.receivertelegramid
                                AND l1.receivertelegramid = l2.sendertelegramid
                    WHERE l1.receivertelegramid = $1
                )
                """
                rows = await conn.fetch(query, user_id)
            return [dict(row) for row in rows]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–æ–≤: {str(e)}")
            return []

    async def delete_mutual_likes(self, user1_id: int, user2_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –≤–∑–∞–∏–º–Ω—ã–µ –ª–∞–π–∫–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–æ–≤ –º–µ–∂–¥—É {user1_id} –∏ {user2_id}")
            async with self.pool.acquire() as conn:
                # –£–¥–∞–ª—è–µ–º –ª–∞–π–∫–∏ –≤ –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
                await conn.execute("""
                    DELETE FROM likes
                    WHERE (sendertelegramid = $1 AND receivertelegramid = $2)
                    OR (sendertelegramid = $2 AND receivertelegramid = $1)
                """, user1_id, user2_id)
                logger.info(f"–í–∑–∞–∏–º–Ω—ã–µ –ª–∞–π–∫–∏ –º–µ–∂–¥—É {user1_id} –∏ {user2_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–æ–≤: {e}", exc_info=True)
            return False

    async def check_user_subscription(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"""
        logger.debug(f"Checking subscription for user {user_id}")
        try:
            async with self.pool.acquire() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                result = await conn.fetchval(
                    """
                    SELECT EXISTS(
                        SELECT 1 FROM purchasedservices
                        WHERE usertelegramid = $1
                        AND serviceid = 1
                        AND serviceenddate > NOW()
                        AND paymentstatus = true
                    )
                    """,
                    user_id
                )

                if result:
                    logger.debug(f"User {user_id} has active subscription")
                    return True
                else:
                    logger.debug(f"User {user_id} has no active subscription")
                    return False
        except Exception as e:
            logger.error(f"Error checking subscription for user {user_id}: {e}")
            return False

    async def activate_subscription(self, user_id: int, days: int = 30) -> bool:
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
        logger.info(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {days} –¥–Ω–µ–π")

        try:
            async with self.pool.acquire() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                has_active = await self.check_user_subscription(user_id)

                if has_active:
                    logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
                    return True

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                payment_id = int(datetime.now().timestamp() * 1000)
                end_date = datetime.now() + timedelta(days=days)

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: user_id={user_id}, service_id=1, end_date={end_date}, payment_id={payment_id}")

                try:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ
                    await conn.execute(
                        """
                        INSERT INTO purchasedservices
                        (usertelegramid, serviceid, serviceenddate, paymentstatus, paymentid)
                        VALUES ($1, $2, $3, $4, $5)
                        """,
                        user_id, 1, end_date, True, payment_id
                    )

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ SQL –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            logger.exception(e)
            return False

    async def save_feedback(self, user_id: int, text: str) -> bool:
        try:
            async with self.pool.acquire() as conn:
                res = await conn.execute(
                    "INSERT INTO feedback (sendertelegramid, messagetext) "
                    "VALUES ($1, $2)",
                    user_id,
                    text
                )

                if res == "INSERT 0 1":
                    return True

                logger.error(f"Unexpected insert result: {res}")
                return False
        except Exception as e:
            logger.error(f"Feedback save error: {str(e)}")
            return False

    async def get_user_likes(self, user_id, only_unviewed=False):
        try:
            async with self.pool.acquire() as conn:
                if only_unviewed:
                    query = """
                        SELECT likeid, sendertelegramid as from_user_id, receivertelegramid as to_user_id,
                            likeviewedstatus
                        FROM likes
                        WHERE receivertelegramid = $1 AND likeviewedstatus = FALSE
                        ORDER BY likeid DESC
                    """
                else:
                    query = """
                        SELECT likeid, sendertelegramid as from_user_id, receivertelegramid as to_user_id,
                            likeviewedstatus
                        FROM likes
                        WHERE receivertelegramid = $1
                        ORDER BY likeid DESC
                    """

                likes = await conn.fetch(query, user_id)
                return [dict(like) for like in likes]
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []

    async def get_user_likes_count(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.pool.acquire() as conn:
                query = """
                SELECT COUNT(*) as count
                FROM likes
                WHERE receivertelegramid = $1
                """
                result = await conn.fetchval(query, user_id)

            return result or 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return 0

    async def get_unviewed_likes_count(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.pool.acquire() as conn:
                query = """
                SELECT COUNT(*) as count
                FROM likes
                WHERE receivertelegramid = $1
                AND likeviewedstatus = false
                """
                result = await conn.fetchval(query, user_id)

                return result or 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return 0

    async def mark_likes_as_viewed(self, sender_id: int, receiver_id: int = None, only_unviewed: bool = True) -> bool:
        """
        –û—Ç–º–µ—á–∞–µ—Ç –ª–∞–π–∫–∏ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ.

        Args:
            sender_id: ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ª–∞–π–∫–∞ –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–ª–∏—á–∏—è receiver_id)
            receiver_id: ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ª–∞–π–∫–∞ (–µ—Å–ª–∏ None, —Ç–æ sender_id —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º)
            only_unviewed: –û–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ª–∞–π–∫–∏

        Returns:
            bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            async with self.pool.acquire() as conn:
                if receiver_id is None:
                    # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –ª–∞–π–∫–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    query = """
                        UPDATE likes
                        SET likeviewedstatus = TRUE
                        WHERE receivertelegramid = $1
                    """
                    if only_unviewed:
                        query += " AND likeviewedstatus = FALSE"

                    await conn.execute(query, sender_id)
                    logger.info(f"–í—Å–µ –ª–∞–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_id} –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ")
                else:
                    # –û—Ç–º–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∞–π–∫–∏ –æ—Ç sender_id –∫ receiver_id
                    query = """
                        UPDATE likes
                        SET likeviewedstatus = TRUE
                        WHERE sendertelegramid = $1 AND receivertelegramid = $2
                    """
                    if only_unviewed:
                        query += " AND likeviewedstatus = FALSE"

                    await conn.execute(query, sender_id, receiver_id)
                    logger.info(f"–õ–∞–π–∫–∏ –æ—Ç {sender_id} –∫ {receiver_id} –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ")

                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∞–π–∫–æ–≤: {e}")
            return False

    async def check_like_exists(self, from_user_id, to_user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ª–∞–π–∫ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥—Ä—É–≥–æ–º—É"""
        try:
            query = """
            SELECT likeid FROM likes
            WHERE sendertelegramid = $1 AND receivertelegramid = $2
            """
            like_id = await self.pool.fetchval(query, from_user_id, to_user_id)
            return like_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ª–∞–π–∫–∞: {e}", exc_info=True)
            return None

    async def debug_likes_table(self, user_id: int = None, liked_user_id: int = None):
        """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∞–π–∫–æ–≤"""
        try:
            async with self.pool.acquire() as conn:
                if user_id and liked_user_id:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    query = """
                        SELECT * FROM likes
                        WHERE (sendertelegramid = $1 AND receivertelegramid = $2)
                        OR (sendertelegramid = $2 AND receivertelegramid = $1)
                    """
                    rows = await conn.fetch(query, user_id, liked_user_id)
                elif user_id:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∞–π–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    query = """
                        SELECT * FROM likes
                        WHERE sendertelegramid = $1 OR receivertelegramid = $1
                    """
                    rows = await conn.fetch(query, user_id)
                else:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∞–π–∫–∏
                    query = "SELECT * FROM likes LIMIT 100"
                    rows = await conn.fetch(query)

                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ –ª–∞–π–∫–æ–≤ ({len(rows)} –∑–∞–ø–∏—Å–µ–π):")
                for row in rows:
                    logger.info(f"–õ–∞–π–∫: –æ—Ç {row['sendertelegramid']} –∫ {row['receivertelegramid']}, ID: {row['likeid']}")

                return rows
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∞–π–∫–æ–≤: {e}")
            return []

    async def get_all_services(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥"""
        logger.debug("Fetching all services")
        try:
            async with self.pool.acquire() as conn:
                query = """
                    SELECT
                        serviceid,
                        cost,
                        serviceduration,
                        description,
                        priorityboostvalue,
                        availabilitystatus
                    FROM servicetypes
                    ORDER BY cost ASC
                """
                rows = await conn.fetch(query)
                return [dict(row) for row in rows]
        except Exception as e:
            logger.error(f"Error fetching services: {e}")
            return []

    async def get_service_by_id(self, service_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –ø–æ ID"""
        logger.debug(f"Fetching service with ID {service_id}")
        try:
            async with self.pool.acquire() as conn:
                query = """
                    SELECT
                        serviceid,
                        cost,
                        serviceduration,
                        description,
                        priorityboostvalue,
                        availabilitystatus
                    FROM servicetypes
                    WHERE serviceid = $1
                """
                row = await conn.fetchrow(query, service_id)
                return dict(row) if row else None
        except Exception as e:
            logger.error(f"Error fetching service {service_id}: {e}")
            return None

    async def get_user_services(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.debug(f"Fetching active services for user {user_id}")
        try:
            async with self.pool.acquire() as conn:
                query = """
                    SELECT
                        ps.recordid,
                        ps.serviceid,
                        ps.serviceenddate,
                        ps.paymentstatus,
                        st.description,
                        st.cost,
                        st.priorityboostvalue
                    FROM purchasedservices ps
                    JOIN servicetypes st ON ps.serviceid = st.serviceid
                    WHERE
                        ps.usertelegramid = $1 AND
                        ps.serviceenddate > NOW() AND
                        ps.paymentstatus = TRUE
                    ORDER BY ps.serviceenddate DESC
                """
                rows = await conn.fetch(query, user_id)
                return [dict(row) for row in rows]
        except Exception as e:
            logger.error(f"Error fetching active services for user {user_id}: {e}")
            return []

    async def get_active_services(self, user_id: int) -> List[Dict]:
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        logger.warning("Method get_active_services is deprecated, use get_user_services instead")
        return await self.get_user_services(user_id)

    async def calculate_priority_coefficient(self, user_id: int) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from decimal import Decimal

        base_coefficient = Decimal('1.0')
        try:
            async with self.pool.acquire() as conn:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                query = """
                    SELECT st.priorityboostvalue
                    FROM purchasedservices ps
                    JOIN servicetypes st ON ps.serviceid = st.serviceid
                    WHERE ps.usertelegramid = $1
                    AND ps.serviceenddate > NOW()
                    AND ps.paymentstatus = TRUE
                """
                rows = await conn.fetch(query, user_id)

                # –°—É–º–º–∏—Ä—É–µ–º –±–æ–Ω—É—Å—ã –æ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥
                total_boost = sum(
                    Decimal(str(row['priorityboostvalue'])) / Decimal('100.0')
                    for row in rows
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                has_subscription = await conn.fetchval(
                    "SELECT EXISTS(SELECT 1 FROM purchasedservices "
                    "WHERE usertelegramid = $1 AND serviceid = 1 "
                    "AND serviceenddate > NOW() AND paymentstatus = TRUE)",
                    user_id
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
                if has_subscription:
                    total_boost += Decimal('0.5')

                final_coefficient = base_coefficient + total_boost
                final_coefficient = min(final_coefficient, Decimal('999.99'))  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º—É–º–∞
                return float(final_coefficient.quantize(Decimal('0.01')))

        except Exception as e:
            logger.error(f"Error calculating priority for user {user_id}: {e}")
            return 1.0

    async def update_user_priority(self, user_id: int) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
        try:
            new_coefficient = await self.calculate_priority_coefficient(user_id)
            async with self.pool.acquire() as conn:
                await conn.execute(
                    "UPDATE users SET profileprioritycoefficient = $1 WHERE telegramid = $2",
                    new_coefficient, user_id
                )
            return True
        except Exception as e:
            logger.error(f"Error updating priority for user {user_id}: {e}")
            return False

    async def activate_service(self, user_id: int, service_id: int) -> bool:
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —É—Å–ª—É–≥—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"""
        try:
            async with self.pool.acquire() as conn:
                # –î–ª—è –±—É—Å—Ç–æ–≤ (—É—Å–ª—É–≥–∏ 2 –∏ 3) –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª—é–±–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—É—Å—Ç–∞
                if service_id in [2, 3]:
                    existing_boost = await conn.fetchrow(
                        """
                        SELECT serviceid, serviceenddate FROM purchasedservices
                        WHERE usertelegramid = $1
                        AND serviceid IN (2, 3)
                        AND serviceenddate > NOW()
                        AND paymentstatus = TRUE
                        LIMIT 1
                        """,
                        user_id
                    )

                    if existing_boost:
                        logger.info(
                            f"User {user_id} tried to buy boost {service_id} while having active boost {existing_boost['serviceid']}")
                        return False

                # –î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (—É—Å–ª—É–≥–∞ 1) –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É –ø–æ–¥–ø–∏—Å–∫—É
                elif service_id == 1:
                    existing_service = await conn.fetchval(
                        """
                        SELECT EXISTS(
                            SELECT 1 FROM purchasedservices
                            WHERE usertelegramid = $1
                            AND serviceid = 1
                            AND serviceenddate > NOW()
                            AND paymentstatus = TRUE
                        )
                        """,
                        user_id
                    )

                    if existing_service:
                        logger.info(f"User {user_id} tried to buy subscription which is already active")
                        return False

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ —É—Å–ª—É–≥–∏
                await conn.execute(
                    """
                    INSERT INTO purchasedservices
                    (usertelegramid, serviceid, serviceenddate, paymentstatus, paymentid)
                    VALUES ($1, $2,
                        NOW() + (SELECT serviceduration FROM servicetypes WHERE serviceid = $2),
                        TRUE, $3)
                    """,
                    user_id, service_id, user_id
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ —ç—Ç–æ service_id=1
                if service_id == 1:
                    await conn.execute(
                        "UPDATE users SET subscriptionstatus = TRUE WHERE telegramid = $1",
                        user_id
                    )
                    await conn.execute(
                        "INSERT INTO moderations (usertelegramid) VALUES ($1)",
                        user_id
                    )

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                await self.update_user_priority(user_id)
                return True

        except Exception as e:
            logger.error(f"Error activating service {service_id} for user {user_id}: {e}")
            return False

    async def update_subscription_status(self, user_id: int) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.pool.acquire() as conn:
                has_subscription = await conn.fetchval(
                    "SELECT EXISTS(SELECT 1 FROM purchasedservices "
                    "WHERE usertelegramid = $1 AND serviceid = 1 "
                    "AND serviceenddate > NOW() AND paymentstatus = TRUE)",
                    user_id
                )

                await conn.execute(
                    "UPDATE users SET subscriptionstatus = $1 WHERE telegramid = $2",
                    has_subscription, user_id
                )
            return True
        except Exception as e:
            logger.error(f"Error updating subscription status for user {user_id}: {e}")
            return False

    async def fix_priority_coefficient(self, user_id: int) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)"""
        return await self.update_user_priority(user_id)

    async def update_all_users_priority(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info("Updating priority coefficients for all users")
        try:
            async with self.pool.acquire() as conn:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = await conn.fetch("SELECT telegramid FROM users")

                updated_count = 0
                for user in users:
                    user_id = user['telegramid']
                    success = await self.fix_priority_coefficient(user_id)
                    if success:
                        updated_count += 1

                logger.info(f"Updated priority coefficients for {updated_count}/{len(users)} users")
                return updated_count
        except Exception as e:
            logger.error(f"Error updating all users priority: {e}")
            logger.exception(e)
            return 0

    async def check_actual_policy(self, user_id: int, policyid: int):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        try:
            async with self.pool.acquire() as conn:
                res = await conn.fetchval("""SELECT EXISTS (SELECT 1
                FROM consenttopdp
                WHERE usertelegramid = $1 AND policyversionid = $2 AND consentstatus = true)""", user_id, policyid)
                logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–≥–ª–∞—Å–µ–Ω —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –ü–ö {res}')
                return bool(res)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –û–ü–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            logger.exception(e)
            return False

    async def get_actual_policy_id(self):
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –ü–ö"""
        logger.info('–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ü–ö')
        try:
            async with self.pool.acquire() as conn:
                vers, text = await conn.fetchrow("""SELECT policyversionid, consenttext
                    FROM privacypolicy
                    ORDER BY effectivedate DESC, policyversionid DESC
                    LIMIT 1;""")
                logger.info(f'–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –ü–ö {vers}')
                return int(vers), text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ü–ö: {e}")
            logger.exception(e)
            return False

    async def get_admin_pass(self, user_id):
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞"""
        logger.info('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∞')
        try:
            async with self.pool.acquire() as conn:
                password = await conn.fetchval("""SELECT password
                    FROM administrators
                    WHERE telegramid = $1;""", user_id)
                return password
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            logger.exception(e)
            return False

    async def get_reports(self):
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"""
        logger.info('–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤')
        try:
            async with self.pool.acquire() as conn:
                reports = await conn.fetch("""
                    SELECT reporttypeid, reportsqlquery
                    FROM reports
                    ORDER BY reporttypeid;
                """)
                return {record['reporttypeid']: record['reportsqlquery'] for record in reports}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ {e}")
            logger.exception(e)
            return None

    async def exec_report(self, admin_id: int, report_id: int,  query: str, *args) -> dict:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è
        :param query: SQL-–∑–∞–ø—Ä–æ—Å
        :param args: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–ª–∏ –æ—à–∏–±–∫–æ–π
        """
        result = []
        try:
            async with self.pool.acquire() as conn:
                records = await conn.fetch(query, *args)
                result = [dict(record) for record in records]

                json_data = json.dumps(result, ensure_ascii=False)

                q = "INSERT INTO statistics (admintelegramid, reporttypeid, reportdata) VALUES ($1, $2, $3)"
                await conn.execute(q, admin_id, report_id, json_data)

        except Exception as e:
            result.append({"error": str(e)})
            logger.error(f"Query execution failed: {e}\nQuery: {query}")

        return result

    async def get_feedback(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {feedbackid: messageid} –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π"""
        logger.info('–ó–∞–ø—Ä–æ—Å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π')
        try:
            async with self.pool.acquire() as conn:
                records = await conn.fetch("""
                    SELECT feedbackid, messagetext
                    FROM feedback
                    WHERE processingstatus = false
                    ORDER BY feedbackid;
                """)

                return {record['feedbackid']: record['messagetext'] for record in records}

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π: {e}")
            logger.exception(e)
            return None

    async def update_feedback_status(self, feedback_id, category, status, admin_id):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è"""
        try:
            async with self.pool.acquire() as conn:
                await conn.execute(
                    """
                    UPDATE feedback
                    SET
                        category = $1,
                        processingstatus = $2,
                        admintelegramid = $3
                    WHERE feedbackid = $4
                    """,
                    category, status, admin_id, feedback_id
                )
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è ID {feedback_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
            logger.exception(e)

    async def get_complaints(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∂–∞–ª–æ–±"""
        logger.info('–ó–∞–ø—Ä–æ—Å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∂–∞–ª–æ–±')
        try:
            async with self.pool.acquire() as conn:
                records = await conn.fetch("""
                    SELECT complaintid, reportedusertelegramid, complaintreason
                    FROM complaints
                    WHERE processingstatus = false
                    ORDER BY complaintid;
                """)

                return {
                record['complaintid']: (
                    record['reportedusertelegramid'],
                    record['complaintreason']
                )
                for record in records
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–∞–ª–æ–±: {e}")
            logger.exception(e)
            return None

    async def update_complaint_status(self, complaint_id, category, status, admin_id, user=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∂–∞–ª–æ–±—ã"""
        try:
            async with self.pool.acquire() as conn:
                await conn.execute(
                    """
                    UPDATE complaints
                    SET
                        admindecision = $1,
                        processingstatus = $2,
                        admintelegramid = $3
                    WHERE complaintid = $4
                    """,
                    category, status, admin_id, complaint_id
                )
                print(f'–û—Ç–ª–∞–¥–∫–∞ –¥–ª—è {user}')
                if user:
                    await conn.execute("""
                    UPDATE users
                    SET accountstatus = 'blocked'
                    WHERE telegramid = $1""", user)

                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∂–∞–ª–æ–±—ã ID {complaint_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∂–∞–ª–æ–±—ã: {e}")
            logger.exception(e)

    async def get_verifications(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π"""
        logger.info('–ó–∞–ø—Ä–æ—Å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π')
        try:
            async with self.pool.acquire() as conn:
                records = await conn.fetch("""
                    SELECT verificationid, verificationvideofileid, usertelegramid
                    FROM verifications
                    WHERE processingstatus = 'open'
                    ORDER BY verificationid;
                """)

                return {
                record['verificationid']: (record['verificationvideofileid'], record['usertelegramid']) for record in records
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π: {e}")
            logger.exception(e)
            return None

    async def update_verification(
        self,
        admin_id: int,
        verification_id: int,
        status: str,  # 'approve' –∏–ª–∏ 'rejected'
        rejection_reason: str = None
    ):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞"""
        try:
            async with self.pool.acquire() as conn:
                # –ü–æ–ª—É—á–∞–µ–º user_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                user_query = """
                    SELECT usertelegramid
                    FROM verifications
                    WHERE verificationid = $1
                """
                user_id = await conn.fetchval(user_query, verification_id)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                await conn.execute("""
                    UPDATE verifications
                    SET processingstatus = $1,
                        rejectionreason = $2,
                        verificationdate = NOW(),
                        admintelegramid = $4
                    WHERE verificationid = $3
                """, status, rejection_reason, verification_id, admin_id)

                return user_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            logger.exception(e)
            return None

    async def get_moderations(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–π"""
        logger.info('–ó–∞–ø—Ä–æ—Å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–π')
        try:
            async with self.pool.acquire() as conn:
                records = await conn.fetch("""
                    SELECT moderationid, usertelegramid
                    FROM moderations
                    WHERE processingstatus = 'open'
                    ORDER BY moderationid;
                """)

                return {
                record['moderationid']: record['usertelegramid'] for record in records
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–π: {e}")
            logger.exception(e)
            return None

    async def update_moderation_status(
        self,
        moderationid: int,
        status: str,  # 'approved' –∏–ª–∏ 'blocked'
        admin_id: int,
        user: int = None,
        rejection_reason: str = None
    ):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        async with self.pool.acquire() as conn:
            await conn.execute("""
                UPDATE moderations
                SET admintelegramid = $1,
                    processingstatus = $2,
                    rejectionreason = $3,
                    moderationdate = CURRENT_TIMESTAMP
                WHERE moderationid = $4
            """, admin_id, status, rejection_reason, moderationid)

            if user:
                await conn.execute("""
                UPDATE users
                SET moderationstatus = true
                WHERE telegramid = $1""", user)

    async def save_verification_video(self, user_id: int, video_file_id: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î file_id –≤–∏–¥–µ–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f'–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î file_id –≤–∏–¥–µ–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
        try:
            async with self.pool.acquire() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
                check_query = """
                    SELECT EXISTS(
                        SELECT 1 FROM verifications
                        WHERE usertelegramid = $1 AND processingstatus = 'rejected'
                    )
                """
                has_rejected = await conn.fetchval(check_query, user_id)

                if has_rejected:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
                    update_query = """
                        UPDATE verifications
                        SET verificationvideofileid = $2,
                            processingstatus = 'open',
                            rejectionreason = NULL,
                            verificationdate = NULL,
                            admintelegramid = NULL
                        WHERE usertelegramid = $1 AND processingstatus = 'rejected'
                        RETURNING TRUE
                    """
                    return await conn.fetchval(update_query, user_id, video_file_id)
                else:
                    # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    insert_query = """
                        INSERT INTO verifications (usertelegramid, verificationvideofileid)
                        VALUES ($1, $2)
                        RETURNING TRUE
                    """
                    return await conn.fetchval(insert_query, user_id, video_file_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            logger.exception(e)
            return False

    async def check_verify(self, user_id: int):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å–ø–µ—à–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
        logger.info(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
        try:
            async with self.pool.acquire() as conn:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                status_query = """
                    SELECT processingstatus, rejectionreason
                    FROM verifications
                    WHERE usertelegramid = $1
                    ORDER BY verificationdate DESC NULLS LAST
                    LIMIT 1
                """
                record = await conn.fetchrow(status_query, user_id)

                if record:
                    status = record['processingstatus']
                    rejection_reason = record['rejectionreason']
                    logger.info(f"–°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {status}")
                else:
                    status = None
                    rejection_reason = None
                    logger.info(f"–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
                query = """
                    SELECT EXISTS(
                        SELECT 1
                        FROM verifications
                        WHERE
                            usertelegramid = $1
                            AND processingstatus = 'approve'
                    )
                """
                result = await conn.fetchval(query, user_id)
                return bool(result), status, rejection_reason
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            logger.exception(e)
            return False, None, None

    async def del_user(self, user_id: int):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        logger.info(f'–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}')
        try:
            async with self.pool.acquire() as conn:
                query = """
                    DELETE FROM users WHERE telegramid=$1;
                """
                result = await conn.execute(query, user_id)
                return bool(result)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            logger.exception(e)
            return False

    async def is_user_blocked(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        async with self.pool.acquire() as conn:
            query = "SELECT EXISTS(SELECT 1 FROM users WHERE telegramid = $1 and accountstatus='blocked')"
            return await conn.fetchval(query, user_id)

    async def save_complaint(self, sender: int, reporteduser: int, reason: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î –∂–∞–ª–æ–±—É –Ω–∞ –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f'–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –∂–∞–ª–æ–±—ã –æ—Ç {sender} –Ω–∞ {reporteduser} –∑–∞ {reason}')
        try:
            async with self.pool.acquire() as conn:
                query = "INSERT INTO complaints (sendertelegramid, reportedusertelegramid, complaintreason) VALUES ($1, $2, $3)"
                return await conn.execute(query, sender, reporteduser, reason)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã –Ω–∞ –∞–Ω–∫–µ—Ç—É {reporteduser}")
            logger.exception(e)
            return None

    async def update_last_action(self, user: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.pool.acquire() as conn:
            query = """UPDATE users
                    SET lastactiondate = NOW()
                    WHERE telegramid = $1"""
            return await conn.execute(query, user)

    async def get_user_services(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.debug(f"Fetching active services for user {user_id}")
        try:
            async with self.pool.acquire() as conn:
                query = """
                    SELECT
                        ps.recordid,
                        ps.serviceid,
                        ps.serviceenddate,
                        ps.paymentstatus,
                        st.description,
                        st.cost,
                        st.priorityboostvalue
                    FROM purchasedservices ps
                    JOIN servicetypes st ON ps.serviceid = st.serviceid
                    WHERE
                        ps.usertelegramid = $1 AND
                        (ps.serviceenddate IS NULL OR ps.serviceenddate > NOW()) AND
                        ps.paymentstatus = TRUE
                    ORDER BY ps.serviceenddate DESC
                """
                rows = await conn.fetch(query, user_id)
                return [dict(row) for row in rows]
        except Exception as e:
            logger.error(f"Error fetching active services for user {user_id}: {e}")
            return []