import asyncpg
import logging
from datetime import datetime
from typing import List, Optional, Dict, Union, Tuple
from bot.models.user import UserDB
from bot.services.utils import standardize_gender

logger = logging.getLogger(__name__)

class Database:
    def __init__(self, config):
        self.config = config
        self.pool: Optional[asyncpg.Pool] = None

    async def connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("Connecting to database...")
        try:
            self.pool = await asyncpg.create_pool(
                user=self.config.db_user,
                password=self.config.db_pass,
                database=self.config.db_name,
                host=self.config.db_host,
                port=self.config.db_port
            )
            logger.info("‚úÖ Successfully connected to database")
            logger.debug(f"Connection params: "
                        f"host={self.config.db_host}, "
                        f"port={self.config.db_port}, "
                        f"dbname={self.config.db_name}, "
                        f"user={self.config.db_user}")
        except Exception as e:
            logger.critical("‚ùå Database connection failed")
            logger.exception(e)
            raise

    async def is_user_registered(self, telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.debug(f"Checking registration for user {telegram_id}")
        async with self.pool.acquire() as conn:
            try:
                result = await conn.fetchrow(
                    "SELECT telegramid FROM users WHERE telegramid = $1",
                    telegram_id
                )
                logger.debug(f"User {telegram_id} registered: {bool(result)}")
                return result is not None
            except Exception as e:
                logger.error(f"Error checking registration for {telegram_id}")
                logger.exception(e)
                return False

    async def save_user(self, telegram_id: int, user_data: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"Saving user {telegram_id}")
        try:
            async with self.pool.acquire() as conn:
                # –õ–æ–≥–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                logger.debug(f"User data: { {k: v for k, v in user_data.items() if k != 'photos'} }")
                logger.debug(f"Photos count: {len(user_data['photos'])}")

                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∞
                gender_value = user_data['gender']
                logger.debug(f"Original gender value: {gender_value}, type: {type(gender_value)}")

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Å—Ç—Ä–æ—á–Ω—ã–º –±—É–∫–≤–∞–º, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                if isinstance(gender_value, str):
                    gender_value = gender_value.lower()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞
                if gender_value in [0, '0', 'male', '–º', '–º—É–∂—Å–∫–æ–π', '–º—É–∂—á–∏–Ω–∞', 'üë® –º—É–∂—Å–∫–æ–π']:
                    standardized_gender = '0'  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                    logger.debug("Standardized to male ('0')")
                else:
                    standardized_gender = '1'  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                    logger.debug("Standardized to female ('1')")

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                await conn.execute("""
                    INSERT INTO users (
                        telegramid, name, age, gender, city,
                        profiledescription, registrationdate, lastactiondate
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
                """, telegram_id, user_data['name'], user_data['age'],
                    standardized_gender, user_data['location'],
                    user_data['description'], datetime.now(), datetime.now())

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                for index, photo_id in enumerate(user_data['photos']):
                    await conn.execute("""
                        INSERT INTO photos
                        (usertelegramid, photofileid, photodisplayorder)
                        VALUES ($1, $2, $3)
                    """, telegram_id, photo_id, index + 1)

                logger.info(f"‚úÖ User {telegram_id} saved successfully")
                return True
        except Exception as e:
            logger.error(f"‚ùå Error saving user {telegram_id}")
            logger.exception(e)
            return False

    async def get_user_data(self, telegram_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.debug(f"Fetching data for user {telegram_id}")
        async with self.pool.acquire() as conn:
            try:
                user = await conn.fetchrow(
                    "SELECT * FROM users WHERE telegramid = $1",
                    telegram_id
                )
                photos = await conn.fetch(
                    "SELECT photofileid FROM photos WHERE usertelegramid = $1 "
                    "ORDER BY photodisplayorder",
                    telegram_id
                )

                if user:
                    logger.debug(f"Found user {telegram_id} with {len(photos)} photos")
                else:
                    logger.debug(f"User {telegram_id} not found")

                return {
                    'name': user['name'],
                    'age': user['age'],
                    'gender': user['gender'],
                    'location': user['city'],
                    'description': user['profiledescription'],
                    'photos': [p['photofileid'] for p in photos]
                } if user else None
            except Exception as e:
                logger.error(f"Error getting data for user {telegram_id}")
                logger.exception(e)
                return None

    async def update_user_field(self, telegram_id: int, **fields) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"Updating user {telegram_id} fields: {', '.join(fields.keys())}")
        async with self.pool.acquire() as conn:
            try:
                updates = []
                values = [telegram_id, datetime.now()]  # –ù–∞—á–∏–Ω–∞–µ–º —Å —ç—Ç–∏—Ö –¥–≤—É—Ö –∑–Ω–∞—á–µ–Ω–∏–π

                for idx, (field, value) in enumerate(fields.items(), start=3):  # –ù–∞—á–∏–Ω–∞–µ–º —Å $3
                    updates.append(f"{field} = ${idx}")
                    values.append(value)
                    logger.debug(f"Setting {field} = {value}")

                query = f"""
                    UPDATE users
                    SET {', '.join(updates)}, lastactiondate = $2
                    WHERE telegramid = $1
                """

                result = await conn.execute(query, *values)  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
                logger.info(f"‚úÖ Updated user {telegram_id}. Result: {result}")
                return True
            except Exception as e:
                logger.error(f"‚ùå Error updating user {telegram_id}")
                logger.exception(e)
                return False

    async def update_user_photos(self, usertelegramid: str, photos: List[str]) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"Updating photos for user {usertelegramid}")
        async with self.pool.acquire() as conn:
            try:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ
                delete_result = await conn.execute(
                    "DELETE FROM photos WHERE usertelegramid = $1",
                    usertelegramid
                )
                logger.debug(f"Deleted {delete_result.split()[-1]} old photos")

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
                for index, photofileid in enumerate(photos):
                    await conn.execute(
                        "INSERT INTO photos (usertelegramid, photofileid, photodisplayorder) VALUES ($1, $2, $3)",
                        usertelegramid, photofileid, index + 1
                    )
                logger.info(f"‚úÖ Added {len(photos)} new photos for user {usertelegramid}")
                return True
            except Exception as e:
                logger.error(f"‚ùå Error updating photos for user {usertelegramid}")
                logger.exception(e)
                return False

    async def get_questions_and_answers(self) -> tuple[Dict, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞"""
        logger.info("Fetching questions and answers")
        async with self.pool.acquire() as conn:
            try:
                questions = await conn.fetch(
                    "SELECT questionid, questiontext FROM questions"
                )
                answers = await conn.fetch(
                    "SELECT answerid, questionid, answertext FROM answers"
                )

                logger.debug(f"Loaded {len(questions)} questions and {len(answers)} answers")

                # –°–ª–æ–≤–∞—Ä—å –≤–æ–ø—Ä–æ—Å–æ–≤
                questions_dict = {
                    q['questionid']: q['questiontext'] for q in questions
                }

                # –°–ª–æ–≤–∞—Ä—å –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
                answers_dict = {}
                for a in answers:
                    question_id = a['questionid']
                    answer_id = a['answerid']
                    answer_text = a['answertext']

                    if question_id not in answers_dict:
                        answers_dict[question_id] = {}

                    answers_dict[question_id][answer_id] = answer_text

                return questions_dict, answers_dict

            except Exception as e:
                logger.error("‚ùå Error loading questions and answers")
                logger.exception(e)
                return {}, {}

    async def save_user_answers(self, telegram_id: int, answers: Dict[int, int]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
        logger.info(f"Saving test answers for user {telegram_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_exists = await self.is_user_registered(telegram_id)
        if not user_exists:
            logger.error(f"Cannot save answers: User {telegram_id} is not registered")
            return False
        
        async with self.pool.acquire() as conn:
            try:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã
                await conn.execute(
                    "DELETE FROM useranswers WHERE usertelegramid = $1",
                    telegram_id
                )
                logger.debug(f"Deleted previous answers for {telegram_id}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ
                for question_id, answer_id in answers.items():
                    await conn.execute("""
                        INSERT INTO useranswers
                        (usertelegramid, questionid, answerid)
                        VALUES ($1, $2, $3)
                    """, telegram_id, question_id, answer_id)

                logger.info(f"‚úÖ Saved {len(answers)} answers for user {telegram_id}")
                return True
            except Exception as e:
                logger.error(f"‚ùå Error saving answers for user {telegram_id}")
                logger.exception(e)
                return False

    async def check_existing_answers(self, user_id: int) -> bool:
        logger.debug(f"Checking existing answers for user {user_id}")
        async with self.pool.acquire() as conn:
            try:
                result = await conn.fetchval(
                    "SELECT EXISTS(SELECT 1 FROM useranswers WHERE usertelegramid = $1)",
                    user_id
                )
                logger.debug(f"User {user_id} has answers: {result}")
                return result
            except Exception as e:
                logger.error(f"Error checking answers for user {user_id}")
                logger.exception(e)
                return False

    async def get_user(self, telegram_id: int) -> Optional[UserDB]:
        async with self.pool.acquire() as conn:
            return await conn.fetchrow(
                "SELECT * FROM users WHERE telegramid = $1",
                telegram_id
            )

    async def update_profile_field(self, user_id: int, field: str, value: Union[str, int, bytes]) -> bool:
            try:
                async with self.pool.acquire() as conn:
                    await conn.execute(
                        f"UPDATE users SET {field} = $1 WHERE telegramid = $2",
                        value, user_id
                    )
                    return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è: {e}")
                return False

    async def del_user_answers(self, telegram_id: int) -> bool:
        async with self.pool.acquire() as conn:
            try:
                await conn.execute(
                    "DELETE FROM useranswers WHERE usertelegramid = $1",
                    telegram_id
                )
                return True
            except Exception as e:
                logger.error(f"Error deleting user answers: {e}")
                logger.exception(e)
                return False

    async def get_user_answers(self, user_id: int) -> Dict[int, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ—Å—Ç"""
        logger.debug(f"Fetching answers for user {user_id}")
        async with self.pool.acquire() as conn:
            try:
                rows = await conn.fetch(
                    "SELECT questionid, answerid FROM useranswers WHERE usertelegramid = $1",
                    user_id
                )
                
                answers = {row['questionid']: row['answerid'] for row in rows}
                logger.debug(f"Found {len(answers)} answers for user {user_id}")
                return answers
            except Exception as e:
                logger.error(f"Error getting answers for user {user_id}: {e}")
                return {}
    
    async def get_answer_weights(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Å–∞ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –≤–æ–ø—Ä–æ—Å–æ–≤
            query = "SELECT questionid FROM questions"
            result = await self.execute_query(query)
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –≤–µ—Å–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (1.0) –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            weights = {row[0]: 1.0 for row in result} if result else {}
            
            logger.debug(f"Using default weights for {len(weights)} questions")
            return weights
        except Exception as e:
            logger.error(f"Error getting question IDs: {e}")
            return {}
    
    async def get_users_with_answers(self, exclude_user_id: int = None) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç"""
        logger.debug(f"Fetching users with test answers (excluding {exclude_user_id})")
        async with self.pool.acquire() as conn:
            try:
                query = """
                    SELECT DISTINCT usertelegramid 
                    FROM useranswers 
                """
                
                params = []
                if exclude_user_id is not None:
                    query += " WHERE usertelegramid != $1"
                    params.append(exclude_user_id)
                
                rows = await conn.fetch(query, *params)
                
                user_ids = [row['usertelegramid'] for row in rows]
                logger.debug(f"Found {len(user_ids)} users with answers")
                return user_ids
            except Exception as e:
                logger.error(f"Error getting users with answers: {e}")
                return []
            
async def check_user_has_test(self, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    logger.debug(f"Checking if user {user_id} has completed the test")
    async with self.pool.acquire() as conn:
        try:
            result = await conn.fetchval(
                "SELECT COUNT(*) FROM useranswers WHERE usertelegramid = $1",
                user_id
            )
            return result > 0
        except Exception as e:
            logger.error(f"Error checking test completion for user {user_id}: {e}")
            return False

async def get_compatible_users(self, user_id: int, limit: int = 20) -> List[Tuple[int, float]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.debug(f"Finding compatible users for user {user_id}")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_answers = await self.get_user_answers(user_id)
        if not user_answers:
            logger.warning(f"User {user_id} has no answers")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç
        other_users = await self.get_users_with_answers(exclude_user_id=user_id)
        logger.debug(f"Found {len(other_users)} other users with answers")
        if not other_users:
            logger.warning("No other users with answers found")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å–∞ –æ—Ç–≤–µ—Ç–æ–≤
        weights = await self.get_answer_weights()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        compatible_users = []
        for other_id in other_users:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            other_answers = await self.get_user_answers(other_id)
            if not other_answers:
                logger.warning(f"User {other_id} has no answers")
                continue
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            compatibility = self._calculate_compatibility(user_answers, other_answers, weights)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞
            if compatibility > 30:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                compatible_users.append((other_id, compatibility))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–æ—Ç –≤—ã—Å–æ–∫–æ–π –∫ –Ω–∏–∑–∫–æ–π)
        compatible_users.sort(key=lambda x: x[1], reverse=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        return compatible_users[:limit]
    
    except Exception as e:
        logger.error(f"Error finding compatible users: {e}")
        logger.exception(e)
        return []

def _calculate_compatibility(self, user1_answers: Dict[int, int], user2_answers: Dict[int, int], weights: Dict[int, Dict[int, float]]) -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    try:
        total_questions = len(set(user1_answers.keys()) & set(user2_answers.keys()))
        if total_questions == 0:
            return 0.0
        
        compatibility_score = 0.0
        
        for question_id in set(user1_answers.keys()) & set(user2_answers.keys()):
            answer1 = user1_answers[question_id]
            answer2 = user2_answers[question_id]
            
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –≤–µ—Å
            if answer1 == answer2:
                weight = weights.get(question_id, {}).get(answer1, 1.0)
                compatibility_score += weight
            else:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã —Ä–∞–∑–Ω—ã–µ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                # –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–ª–∏–∑–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
                pass
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        compatibility_percent = (compatibility_score / total_questions) * 100
        return compatibility_percent
    
    except Exception as e:
        logger.error(f"Error calculating compatibility: {e}")
        return 0.0

async def get_user_profile(self, user_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    logger.debug(f"Getting profile for user {user_id}")
    async with self.pool.acquire() as conn:
        try:
            user = await conn.fetchrow(
                "SELECT telegramid, name, age, gender, city as location, profiledescription as description FROM users WHERE telegramid = $1",
                user_id
            )
            
            if not user:
                logger.warning(f"User {user_id} not found")
                return None
            
            return dict(user)
        except Exception as e:
            logger.error(f"Error getting profile for user {user_id}: {e}")
            return None

async def get_user_photos(self, user_id: int) -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.debug(f"Getting photos for user {user_id}")
    async with self.pool.acquire() as conn:
        try:
            rows = await conn.fetch(
                "SELECT photofileid FROM photos WHERE usertelegramid = $1 ORDER BY photodisplayorder",
                user_id
            )
            
            return [row['photofileid'] for row in rows]
        except Exception as e:
            logger.error(f"Error getting photos for user {user_id}: {e}")
            return []

async def add_like(self, user_id: int, liked_user_id: int) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ª–∞–π–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    logger.info(f"User {user_id} likes user {liked_user_id}")
    async with self.pool.acquire() as conn:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ª–∞–π–∫
            existing = await conn.fetchval(
                "SELECT EXISTS(SELECT 1 FROM likes WHERE user_id = $1 AND liked_user_id = $2)",
                user_id, liked_user_id
            )
            
            if existing:
                logger.debug(f"Like from {user_id} to {liked_user_id} already exists")
                return True
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ª–∞–π–∫
            await conn.execute(
                "INSERT INTO likes (user_id, liked_user_id, created_at) VALUES ($1, $2, $3)",
                user_id, liked_user_id, datetime.now()
            )
            
            logger.info(f"Added like from {user_id} to {liked_user_id}")
            return True
        except Exception as e:
            logger.error(f"Error adding like from {user_id} to {liked_user_id}: {e}")
            return False

async def check_mutual_like(self, user1_id: int, user2_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–æ–≤ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    logger.debug(f"Checking mutual like between {user1_id} and {user2_id}")
    async with self.pool.acquire() as conn:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫ –æ—Ç user1 –∫ user2
            like1 = await conn.fetchval(
                "SELECT EXISTS(SELECT 1 FROM likes WHERE user_id = $1 AND liked_user_id = $2)",
                user1_id, user2_id
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫ –æ—Ç user2 –∫ user1
            like2 = await conn.fetchval(
                "SELECT EXISTS(SELECT 1 FROM likes WHERE user_id = $1 AND liked_user_id = $2)",
                user2_id, user1_id
            )
            
            # –í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫, –µ—Å–ª–∏ –æ–±–∞ –ª–∞–π–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            is_mutual = like1 and like2
            logger.debug(f"Mutual like between {user1_id} and {user2_id}: {is_mutual}")
            return is_mutual
        except Exception as e:
            logger.error(f"Error checking mutual like between {user1_id} and {user2_id}: {e}")
            return False
