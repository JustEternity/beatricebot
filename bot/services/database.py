from decimal import Decimal

import asyncpg
import logging
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Union, Tuple
from bot.models.user import UserDB
from bot.services.utils import standardize_gender

logger = logging.getLogger(__name__)

class Database:
    def __init__(self, config):
        self.config = config
        self.pool: Optional[asyncpg.Pool] = None

    async def connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("Connecting to database...")
        try:
            self.pool = await asyncpg.create_pool(
                user=self.config.db_user,
                password=self.config.db_pass,
                database=self.config.db_name,
                host=self.config.db_host,
                port=self.config.db_port
            )
            logger.info("‚úÖ Successfully connected to database")
            logger.debug(f"Connection params: "
                        f"host={self.config.db_host}, "
                        f"port={self.config.db_port}, "
                        f"dbname={self.config.db_name}, "
                        f"user={self.config.db_user}")
        except Exception as e:
            logger.critical("‚ùå Database connection failed")
            logger.exception(e)
            raise

    async def is_user_registered(self, telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.debug(f"Checking registration for user {telegram_id}")
        async with self.pool.acquire() as conn:
            try:
                result = await conn.fetchrow(
                    "SELECT telegramid FROM users WHERE telegramid = $1",
                    telegram_id
                )
                logger.debug(f"User {telegram_id} registered: {bool(result)}")
                return result is not None
            except Exception as e:
                logger.error(f"Error checking registration for {telegram_id}")
                logger.exception(e)
                return False

    async def save_user(self, telegram_id: int, user_data: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"Saving user {telegram_id}")
        try:
            async with self.pool.acquire() as conn:
                # –õ–æ–≥–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                logger.debug(f"User data: { {k: v for k, v in user_data.items() if k != 'photos'} }")
                logger.debug(f"Photos count: {len(user_data['photos'])}")

                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∞
                gender_value = user_data['gender']
                logger.debug(f"Original gender value: {gender_value}, type: {type(gender_value)}")

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Å—Ç—Ä–æ—á–Ω—ã–º –±—É–∫–≤–∞–º, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                if isinstance(gender_value, str):
                    gender_value = gender_value.lower()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞
                if gender_value in [0, '0', 'male', '–º', '–º—É–∂—Å–∫–æ–π', '–º—É–∂—á–∏–Ω–∞', 'üë® –º—É–∂—Å–∫–æ–π']:
                    standardized_gender = '0'  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                    logger.debug("Standardized to male ('0')")
                else:
                    standardized_gender = '1'  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                    logger.debug("Standardized to female ('1')")

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                await conn.execute("""
                    INSERT INTO users (
                        telegramid, name, age, gender, city,
                        profiledescription, registrationdate, lastactiondate
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
                """, telegram_id, user_data['name'], user_data['age'],
                    standardized_gender, user_data['location'],
                    user_data['description'], datetime.now(), datetime.now())

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è —Å –ü–ö
                await conn.execute("""
                    INSERT INTO consenttopdp (usertelegramid, policyversionid, consentstatus)
                    VALUES ($1, $2, $3)
                """, telegram_id, user_data['idpolicy'], user_data['policy'])

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                for index, photo_info in enumerate(user_data['photos']):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º file_id –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–æ—Ç–æ
                    photo_id = photo_info['file_id'] if isinstance(photo_info, dict) else photo_info
                    logger.debug(f"Processing photo {index + 1}: {photo_info}")
                    logger.debug(f"Extracted file_id: {photo_id}")

                    await conn.execute("""
                        INSERT INTO photos
                        (usertelegramid, photourl, photofileid, photodisplayorder)
                         VALUES ($1, $2, $3, $4)
                     """,
                     telegram_id,
                     photo_info['s3_url'],   # URL —Ñ–æ—Ç–æ
                     photo_info['file_id'],  # Telegram file ID
                     index)                  # –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ)

                logger.info(f"‚úÖ User {telegram_id} saved successfully")
                return True
        except Exception as e:
            logger.error(f"‚ùå Error saving user {telegram_id}")
            logger.exception(e)
            return False

    async def get_user_data(self, telegram_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.debug(f"Fetching data for user {telegram_id}")
        async with self.pool.acquire() as conn:
            try:
                user = await conn.fetchrow(
                    "SELECT * FROM users WHERE telegramid = $1",
                    telegram_id
                )
                photos = await conn.fetch(
                    "SELECT photofileid FROM photos WHERE usertelegramid = $1 "
                    "ORDER BY photodisplayorder",
                    telegram_id
                )

                if not user:
                    logger.warning(f"User {telegram_id} not found in database")
                    return None

                return {
                    'name': user['name'],
                    'age': user['age'],
                    'gender': user['gender'],
                    'location': user['city'],
                    'description': user['profiledescription'],
                    'photos': [p['photofileid'] for p in photos] if photos else []
                }
            except Exception as e:
                logger.error(f"Error getting data for user {telegram_id}: {e}")
                return None

    async def save_policy_acception(self, telegram_id: int, user_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è —Å –ü–ö (–ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏)"""
        logger.info(f"Updating user {telegram_id} policy acception")
        async with self.pool.acquire() as conn:
            try:
                await conn.execute("""
                            INSERT INTO consenttopdp (usertelegramid, policyversionid, consentstatus)
                            VALUES ($1, $2, $3)
                        """, telegram_id, user_data['idpolicy'], user_data['policy'])
                return True
            except Exception as e:
                logger.error(f"‚ùå Error saving user {telegram_id} policy acception")
                logger.exception(e)
                return False

    async def update_user_field(self, telegram_id: int, **fields) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"Updating user {telegram_id} fields: {', '.join(fields.keys())}")
        async with self.pool.acquire() as conn:
            try:
                updates = []
                values = [telegram_id, datetime.now()]  # –ù–∞—á–∏–Ω–∞–µ–º —Å —ç—Ç–∏—Ö –¥–≤—É—Ö –∑–Ω–∞—á–µ–Ω–∏–π

                for idx, (field, value) in enumerate(fields.items(), start=3):  # –ù–∞—á–∏–Ω–∞–µ–º —Å $3
                    updates.append(f"{field} = ${idx}")
                    values.append(value)
                    logger.debug(f"Setting {field} = {value}")

                query = f"""
                    UPDATE users
                    SET {', '.join(updates)}, lastactiondate = $2
                    WHERE telegramid = $1
                """

                result = await conn.execute(query, *values)  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
                logger.info(f"‚úÖ Updated user {telegram_id}. Result: {result}")
                return True
            except Exception as e:
                logger.error(f"‚ùå Error updating user {telegram_id}")
                logger.exception(e)
                return False

    async def update_user_photos(
        self,
        usertelegramid: str,
        photos: List[dict]  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫
    ) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π S3"""
        logger.info(f"Updating photos for user {usertelegramid}")

        async with self.pool.acquire() as conn:
            async with conn.transaction():  # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                try:
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ
                    delete_result = await conn.execute(
                        "DELETE FROM photos WHERE usertelegramid = $1",
                        usertelegramid
                    )
                    logger.debug(f"Deleted {delete_result.split()[-1]} old photos")

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ —Å S3 URL
                    for index, photo_data in enumerate(photos):
                        await conn.execute(
                            """INSERT INTO photos
                            (usertelegramid, photofileid, photourl, photodisplayorder)
                            VALUES ($1, $2, $3, $4)""",
                            usertelegramid,
                            photo_data["file_id"],
                            photo_data["s3_url"],
                            index + 1
                        )

                    logger.info(f"‚úÖ Added {len(photos)} photos with S3 URLs for user {usertelegramid}")
                    return True

                except Exception as e:
                    logger.error(f"‚ùå Error updating photos for user {usertelegramid}: {str(e)}")
                    return False

    async def get_questions_and_answers(self) -> tuple[Dict, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞"""
        logger.info("Fetching questions and answers")
        async with self.pool.acquire() as conn:
            try:
                questions = await conn.fetch(
                    "SELECT questionid, questiontext FROM questions"
                )
                answers = await conn.fetch(
                    "SELECT answerid, questionid, answertext FROM answers"
                )

                logger.debug(f"Loaded {len(questions)} questions and {len(answers)} answers")

                # –°–ª–æ–≤–∞—Ä—å –≤–æ–ø—Ä–æ—Å–æ–≤
                questions_dict = {
                    q['questionid']: q['questiontext'] for q in questions
                }

                # –°–ª–æ–≤–∞—Ä—å –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
                answers_dict = {}
                for a in answers:
                    question_id = a['questionid']
                    answer_id = a['answerid']
                    answer_text = a['answertext']

                    if question_id not in answers_dict:
                        answers_dict[question_id] = {}

                    answers_dict[question_id][answer_id] = answer_text

                return questions_dict, answers_dict

            except Exception as e:
                logger.error("‚ùå Error loading questions and answers")
                logger.exception(e)
                return {}, {}

    async def save_user_answers(self, telegram_id: int, answers: Dict[int, int]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
        logger.info(f"Saving test answers for user {telegram_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_exists = await self.is_user_registered(telegram_id)
        if not user_exists:
            logger.error(f"Cannot save answers: User {telegram_id} is not registered")
            return False

        async with self.pool.acquire() as conn:
            try:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã
                await conn.execute(
                    "DELETE FROM useranswers WHERE usertelegramid = $1",
                    telegram_id
                )
                logger.debug(f"Deleted previous answers for {telegram_id}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ
                for question_id, answer_id in answers.items():
                    await conn.execute("""
                        INSERT INTO useranswers
                        (usertelegramid, questionid, answerid)
                        VALUES ($1, $2, $3)
                    """, telegram_id, question_id, answer_id)

                logger.info(f"‚úÖ Saved {len(answers)} answers for user {telegram_id}")
                return True
            except Exception as e:
                logger.error(f"‚ùå Error saving answers for user {telegram_id}")
                logger.exception(e)
                return False

    async def check_existing_answers(self, user_id: int) -> bool:
        logger.debug(f"Checking existing answers for user {user_id}")
        async with self.pool.acquire() as conn:
            try:
                result = await conn.fetchval(
                    "SELECT EXISTS(SELECT 1 FROM useranswers WHERE usertelegramid = $1)",
                    user_id
                )
                logger.debug(f"User {user_id} has answers: {result}")
                return result
            except Exception as e:
                logger.error(f"Error checking answers for user {user_id}")
                logger.exception(e)
                return False

    async def get_user(self, telegram_id: int) -> Optional[UserDB]:
        async with self.pool.acquire() as conn:
            return await conn.fetchrow(
                "SELECT * FROM users WHERE telegramid = $1",
                telegram_id
            )

    async def update_profile_field(self, user_id: int, field: str, value: Union[str, int, bytes]) -> bool:
            try:
                async with self.pool.acquire() as conn:
                    await conn.execute(
                        f"UPDATE users SET {field} = $1 WHERE telegramid = $2",
                        value, user_id
                    )
                    return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è: {e}")
                return False

    async def del_user_answers(self, telegram_id: int) -> bool:
        async with self.pool.acquire() as conn:
            try:
                await conn.execute(
                    "DELETE FROM useranswers WHERE usertelegramid = $1",
                    telegram_id
                )
                return True
            except Exception as e:
                logger.error(f"Error deleting user answers: {e}")
                logger.exception(e)
                return False

    async def get_user_answers(self, user_id: int) -> Dict[int, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ—Å—Ç"""
        logger.debug(f"Fetching answers for user {user_id}")
        async with self.pool.acquire() as conn:
            try:
                rows = await conn.fetch(
                    "SELECT questionid, answerid FROM useranswers WHERE usertelegramid = $1",
                    user_id
                )

                answers = {row['questionid']: row['answerid'] for row in rows}
                logger.debug(f"Found {len(answers)} answers for user {user_id}")
                return answers
            except Exception as e:
                logger.error(f"Error getting answers for user {user_id}: {e}")
                return {}

    async def get_answer_weights(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Å–∞ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –≤–æ–ø—Ä–æ—Å–æ–≤
            query = "SELECT questionid FROM questions"
            result = await self.execute_query(query)

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –≤–µ—Å–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (1.0) –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            weights = {row[0]: 1.0 for row in result} if result else {}

            logger.debug(f"Using default weights for {len(weights)} questions")
            return weights
        except Exception as e:
            logger.error(f"Error getting question IDs: {e}")
            return {}

    async def get_users_with_answers(self, exclude_user_id: int = None) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç"""
        logger.debug(f"Fetching users with test answers (excluding {exclude_user_id})")
        async with self.pool.acquire() as conn:
            try:
                query = """
                    SELECT DISTINCT usertelegramid
                    FROM useranswers
                """

                params = []
                if exclude_user_id is not None:
                    query += " WHERE usertelegramid != $1"
                    params.append(exclude_user_id)

                rows = await conn.fetch(query, *params)

                user_ids = [row['usertelegramid'] for row in rows]
                logger.debug(f"Found {len(user_ids)} users with answers")
                return user_ids
            except Exception as e:
                logger.error(f"Error getting users with answers: {e}")
                return []

    async def check_user_has_test(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        logger.debug(f"Checking if user {user_id} has completed the test")
        async with self.pool.acquire() as conn:
            try:
                result = await conn.fetchval(
                    "SELECT COUNT(*) FROM useranswers WHERE usertelegramid = $1",
                    user_id
                )
                return result > 0
            except Exception as e:
                logger.error(f"Error checking test completion for user {user_id}: {e}")
                return False

    async def get_compatible_users(self, user_id: int, limit: int = 20) -> List[Tuple[int, float]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.debug(f"Finding compatible users for user {user_id}")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_answers = await self.get_user_answers(user_id)
            if not user_answers:
                logger.warning(f"User {user_id} has no answers")
                return []

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç–µ—Å—Ç
            other_users = await self.get_users_with_answers(exclude_user_id=user_id)
            logger.debug(f"Found {len(other_users)} other users with answers")
            if not other_users:
                logger.warning("No other users with answers found")
                return []

            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å–∞ –æ—Ç–≤–µ—Ç–æ–≤
            weights = await self.get_answer_weights()

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            compatible_users = []
            for other_id in other_users:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                other_answers = await self.get_user_answers(other_id)
                if not other_answers:
                    logger.warning(f"User {other_id} has no answers")
                    continue

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                compatibility = self._calculate_compatibility(user_answers, other_answers, weights)

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞
                if compatibility > 30:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    compatible_users.append((other_id, compatibility))

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–æ—Ç –≤—ã—Å–æ–∫–æ–π –∫ –Ω–∏–∑–∫–æ–π)
            compatible_users.sort(key=lambda x: x[1], reverse=True)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            return compatible_users[:limit]

        except Exception as e:
            logger.error(f"Error finding compatible users: {e}")
            logger.exception(e)
            return []

    def _calculate_compatibility(self, user1_answers: Dict[int, int], user2_answers: Dict[int, int], weights: Dict[int, Dict[int, float]]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            total_questions = len(set(user1_answers.keys()) & set(user2_answers.keys()))
            if total_questions == 0:
                return 0.0

            compatibility_score = 0.0

            for question_id in set(user1_answers.keys()) & set(user2_answers.keys()):
                answer1 = user1_answers[question_id]
                answer2 = user2_answers[question_id]

                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –≤–µ—Å
                if answer1 == answer2:
                    weight = weights.get(question_id, {}).get(answer1, 1.0)
                    compatibility_score += weight
                else:
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã —Ä–∞–∑–Ω—ã–µ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                    # –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–ª–∏–∑–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
                    pass

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            compatibility_percent = (compatibility_score / total_questions) * 100
            return compatibility_percent

        except Exception as e:
            logger.error(f"Error calculating compatibility: {e}")
            return 0.0

    async def get_user_profile(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.pool.acquire() as conn:
                query = """
                    SELECT telegramid, name, age, gender, city, profiledescription
                    FROM users
                    WHERE telegramid = $1
                """
                result = await conn.fetchrow(query, user_id)
                if result:
                    return dict(result)
                return None
        except Exception as e:
            logger.error(f"Error getting user profile for {user_id}: {e}")
            return None

    async def get_user_photos(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.pool.acquire() as conn:
                query = """
                SELECT photofileid, photourl
                FROM photos
                WHERE usertelegramid = $1
                ORDER BY photodisplayorder
                """
                rows = await conn.fetch(query, user_id)

                # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                photos = [row['photofileid'] for row in rows] if rows else []
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                for i, photo in enumerate(photos):
                    logger.debug(f"–§–æ—Ç–æ {i+1}: {photo[:30]}...")

                return photos
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []

    async def add_like(self, user_id: int, liked_user_id: int, bot=None) -> int:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ª–∞–π–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ª–∞–π–∫
            like_exists = await self.check_like_exists(user_id, liked_user_id)

            if like_exists:
                logger.info(f"–õ–∞–π–∫ –æ—Ç {user_id} –∫ {liked_user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return 0

            async with self.pool.acquire() as conn:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ª–∞–π–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                like_id = await conn.fetchval("""
                    INSERT INTO likes (sendertelegramid, receivertelegramid, likeviewedstatus)
                    VALUES ($1, $2, FALSE)
                    RETURNING likeid
                """, user_id, liked_user_id)

                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ª–∞–π–∫ –æ—Ç {user_id} –∫ {liked_user_id}, ID: {like_id}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
                is_mutual = await self.check_mutual_like(user_id, liked_user_id)
                logger.info(f"–í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ –º–µ–∂–¥—É {user_id} –∏ {liked_user_id}: {is_mutual}")

                # –ï—Å–ª–∏ —ç—Ç–æ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –º–∞—Ç—á–µ
                if is_mutual:
                    await self.create_match(user_id, liked_user_id)
                    logger.info(f"–°–æ–∑–¥–∞–Ω –º–∞—Ç—á –º–µ–∂–¥—É {user_id} –∏ {liked_user_id}")

                # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if bot:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ –æ—Ç {user_id} –∫ {liked_user_id}")
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
                    from bot.handlers.algorithm import send_like_notification
                    await send_like_notification(bot, user_id, liked_user_id, self)
                else:
                    logger.warning(f"–û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞ –æ—Ç {user_id} –∫ {liked_user_id}")

                return like_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞: {e}", exc_info=True)
            return 0

    async def check_mutual_like(self, user_id: int, liked_user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–æ–≤ –º–µ–∂–¥—É {user_id} –∏ {liked_user_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ –≤—Ç–æ—Ä–æ–º—É
            like_1_to_2 = await self.check_like_exists(user_id, liked_user_id)
            logger.debug(f"–õ–∞–π–∫ –æ—Ç {user_id} –∫ {liked_user_id}: {like_1_to_2}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø–µ—Ä–≤–æ–º—É
            like_2_to_1 = await self.check_like_exists(liked_user_id, user_id)
            logger.debug(f"–õ–∞–π–∫ –æ—Ç {liked_user_id} –∫ {user_id}: {like_2_to_1}")

            # –í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–∞ –ª–∞–π–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            return like_1_to_2 and like_2_to_1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞: {e}")
            return False

    async def get_mutual_likes(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –µ—Å—Ç—å –≤–∑–∞–∏–º–Ω—ã–µ –ª–∞–π–∫–∏"""
        try:
            async with self.pool.acquire() as conn:
                query = """
                SELECT u.* FROM users u
                WHERE u.telegramid IN (
                    SELECT l1.sendertelegramid FROM likes l1
                    JOIN likes l2 ON l1.sendertelegramid = l2.receivertelegramid
                                AND l1.receivertelegramid = l2.sendertelegramid
                    WHERE l1.receivertelegramid = $1
                )
                """
                rows = await conn.fetch(query, user_id)
            return [dict(row) for row in rows]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–æ–≤: {str(e)}")
            return []

    async def check_user_subscription(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"""
        logger.debug(f"Checking subscription for user {user_id}")
        try:
            async with self.pool.acquire() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                result = await conn.fetchval(
                    """
                    SELECT EXISTS(
                        SELECT 1 FROM purchasedservices
                        WHERE usertelegramid = $1
                        AND serviceid = 1
                        AND serviceenddate > NOW()
                        AND paymentstatus = true
                    )
                    """,
                    user_id
                )

                if result:
                    logger.debug(f"User {user_id} has active subscription")
                    return True
                else:
                    logger.debug(f"User {user_id} has no active subscription")
                    return False
        except Exception as e:
            logger.error(f"Error checking subscription for user {user_id}: {e}")
            return False

    async def activate_subscription(self, user_id: int, days: int = 30) -> bool:
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
        logger.info(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {days} –¥–Ω–µ–π")

        try:
            async with self.pool.acquire() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                has_active = await self.check_user_subscription(user_id)

                if has_active:
                    logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
                    return True

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                payment_id = int(datetime.now().timestamp() * 1000)
                end_date = datetime.now() + timedelta(days=days)

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: user_id={user_id}, service_id=1, end_date={end_date}, payment_id={payment_id}")

                try:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ
                    await conn.execute(
                        """
                        INSERT INTO purchasedservices
                        (usertelegramid, serviceid, serviceenddate, paymentstatus, paymentid)
                        VALUES ($1, $2, $3, $4, $5)
                        """,
                        user_id, 1, end_date, True, payment_id
                    )

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ SQL –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            logger.exception(e)
            return False

    async def save_feedback(self, user_id: int, text: str) -> bool:
        try:
            async with self.pool.acquire() as conn:
                res = await conn.execute(
                    "INSERT INTO feedback (sendertelegramid, messagetext) "
                    "VALUES ($1, $2)",
                    user_id,
                    text
                )

                if res == "INSERT 0 1":
                    return True

                logger.error(f"Unexpected insert result: {res}")
                return False
        except Exception as e:
            logger.error(f"Feedback save error: {str(e)}")
            return False

    async def get_user_likes(self, user_id: int, only_unviewed: bool = False) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ª–∞–π–∫–Ω—É–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.pool.acquire() as conn:
                query = """
                    SELECT l.likeid, l.sendertelegramid as from_user_id, l.likeviewedstatus
                    FROM likes l
                    WHERE l.receivertelegramid = $1
                """

                if only_unviewed:
                    query += " AND l.likeviewedstatus = FALSE"

                query += " ORDER BY l.likeid DESC"

                likes = await conn.fetch(query, user_id)

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                result = []
                for like in likes:
                    result.append({
                        'likeid': like['likeid'],
                        'from_user_id': like['from_user_id'],
                        'likeviewedstatus': like['likeviewedstatus']
                    })

                return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return []

    async def get_user_likes_count(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.pool.acquire() as conn:
                query = """
                SELECT COUNT(*) as count
                FROM likes
                WHERE receivertelegramid = $1
                """
                result = await conn.fetchval(query, user_id)

            return result or 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return 0

    async def get_unviewed_likes_count(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.pool.acquire() as conn:
                query = """
                SELECT COUNT(*) as count
                FROM likes
                WHERE receivertelegramid = $1
                AND likeviewedstatus = false
                """
                result = await conn.fetchval(query, user_id)

                return result or 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return 0

    async def mark_likes_as_viewed(self, sender_id: int, receiver_id: int = None, only_unviewed: bool = True) -> bool:
        """
        –û—Ç–º–µ—á–∞–µ—Ç –ª–∞–π–∫–∏ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ.

        Args:
            sender_id: ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ª–∞–π–∫–∞ –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–ª–∏—á–∏—è receiver_id)
            receiver_id: ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ª–∞–π–∫–∞ (–µ—Å–ª–∏ None, —Ç–æ sender_id —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º)
            only_unviewed: –û–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ª–∞–π–∫–∏

        Returns:
            bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            async with self.pool.acquire() as conn:
                if receiver_id is None:
                    # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –ª–∞–π–∫–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    query = """
                        UPDATE likes
                        SET likeviewedstatus = TRUE
                        WHERE receivertelegramid = $1
                    """
                    if only_unviewed:
                        query += " AND likeviewedstatus = FALSE"

                    await conn.execute(query, sender_id)
                    logger.info(f"–í—Å–µ –ª–∞–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_id} –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ")
                else:
                    # –û—Ç–º–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∞–π–∫–∏ –æ—Ç sender_id –∫ receiver_id
                    query = """
                        UPDATE likes
                        SET likeviewedstatus = TRUE
                        WHERE sendertelegramid = $1 AND receivertelegramid = $2
                    """
                    if only_unviewed:
                        query += " AND likeviewedstatus = FALSE"

                    await conn.execute(query, sender_id, receiver_id)
                    logger.info(f"–õ–∞–π–∫–∏ –æ—Ç {sender_id} –∫ {receiver_id} –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ")

                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∞–π–∫–æ–≤: {e}")
            return False

    async def check_like_exists(self, user_id: int, liked_user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ª–∞–π–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            async with self.pool.acquire() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–∞–π–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                result = await conn.fetchval("""
                    SELECT EXISTS(
                        SELECT 1 FROM likes
                        WHERE sendertelegramid = $1 AND receivertelegramid = $2
                    )
                """, user_id, liked_user_id)

                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∞–π–∫–∞ –æ—Ç {user_id} –∫ {liked_user_id}: {bool(result)}")

                return bool(result)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ª–∞–π–∫–∞: {e}")
            return False

    async def check_match_exists(self, user1_id: int, user2_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            async with self.pool.acquire() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
                result = await conn.fetchval("""
                    SELECT EXISTS(
                        SELECT 1 FROM matches
                        WHERE (usertelegramid = $1 AND matchedusertelegramid = $2)
                        OR (usertelegramid = $2 AND matchedusertelegramid = $1)
                    )
                """, user1_id, user2_id)

                return bool(result)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏: {e}")
            return False

    async def debug_likes_table(self, user_id: int = None, liked_user_id: int = None):
        """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∞–π–∫–æ–≤"""
        try:
            async with self.pool.acquire() as conn:
                if user_id and liked_user_id:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–∞—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    query = """
                        SELECT * FROM likes
                        WHERE (sendertelegramid = $1 AND receivertelegramid = $2)
                        OR (sendertelegramid = $2 AND receivertelegramid = $1)
                    """
                    rows = await conn.fetch(query, user_id, liked_user_id)
                elif user_id:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∞–π–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    query = """
                        SELECT * FROM likes
                        WHERE sendertelegramid = $1 OR receivertelegramid = $1
                    """
                    rows = await conn.fetch(query, user_id)
                else:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∞–π–∫–∏
                    query = "SELECT * FROM likes LIMIT 100"
                    rows = await conn.fetch(query)

                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ –ª–∞–π–∫–æ–≤ ({len(rows)} –∑–∞–ø–∏—Å–µ–π):")
                for row in rows:
                    logger.info(f"–õ–∞–π–∫: –æ—Ç {row['sendertelegramid']} –∫ {row['receivertelegramid']}, ID: {row['likeid']}")

                return rows
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∞–π–∫–æ–≤: {e}")
            return []

    async def create_match(self, user1_id: int, user2_id: int) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏
            match_exists = await self.check_match_exists(user1_id, user2_id)

            if match_exists:
                logger.info(f"–ó–∞–ø–∏—Å—å –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏ –º–µ–∂–¥—É {user1_id} –∏ {user2_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            try:
                compatibility = await self.calculate_compatibility(user1_id, user2_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {e}")
                compatibility = 50  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            async with self.pool.acquire() as conn:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ON CONFLICT DO NOTHING –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
                await conn.execute("""
                    INSERT INTO matches (usertelegramid, matchedusertelegramid, interestmatchpercentage)
                    VALUES ($1, $2, $3)
                    ON CONFLICT (usertelegramid, matchedusertelegramid) DO NOTHING
                """, user1_id, user2_id, compatibility)

                # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é –∑–∞–ø–∏—Å—å (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏)
                await conn.execute("""
                    INSERT INTO matches (usertelegramid, matchedusertelegramid, interestmatchpercentage)
                    VALUES ($1, $2, $3)
                    ON CONFLICT (usertelegramid, matchedusertelegramid) DO NOTHING
                """, user2_id, user1_id, compatibility)

                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏ –º–µ–∂–¥—É {user1_id} –∏ {user2_id}")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏: {e}")
            return False

    async def get_all_services(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥"""
        logger.debug("Fetching all services")
        try:
            async with self.pool.acquire() as conn:
                query = """
                    SELECT
                        serviceid,
                        cost,
                        serviceduration,
                        description,
                        priorityboostvalue,
                        availabilitystatus
                    FROM servicetypes
                    ORDER BY cost ASC
                """
                rows = await conn.fetch(query)
                return [dict(row) for row in rows]
        except Exception as e:
            logger.error(f"Error fetching services: {e}")
            return []

    async def get_service_by_id(self, service_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –ø–æ ID"""
        logger.debug(f"Fetching service with ID {service_id}")
        try:
            async with self.pool.acquire() as conn:
                query = """
                    SELECT
                        serviceid,
                        cost,
                        serviceduration,
                        description,
                        priorityboostvalue,
                        availabilitystatus
                    FROM servicetypes
                    WHERE serviceid = $1
                """
                row = await conn.fetchrow(query, service_id)
                return dict(row) if row else None
        except Exception as e:
            logger.error(f"Error fetching service {service_id}: {e}")
            return None

    async def get_user_services(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.debug(f"Fetching active services for user {user_id}")
        try:
            async with self.pool.acquire() as conn:
                query = """
                    SELECT
                        ps.recordid,
                        ps.serviceid,
                        ps.serviceenddate,
                        ps.paymentstatus,
                        st.description,
                        st.cost,
                        st.priorityboostvalue
                    FROM purchasedservices ps
                    JOIN servicetypes st ON ps.serviceid = st.serviceid
                    WHERE
                        ps.usertelegramid = $1 AND
                        ps.serviceenddate > NOW() AND
                        ps.paymentstatus = TRUE
                    ORDER BY ps.serviceenddate DESC
                """
                rows = await conn.fetch(query, user_id)
                return [dict(row) for row in rows]
        except Exception as e:
            logger.error(f"Error fetching active services for user {user_id}: {e}")
            return []

    async def get_active_services(self, user_id: int) -> List[Dict]:
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        logger.warning("Method get_active_services is deprecated, use get_user_services instead")
        return await self.get_user_services(user_id)

    async def calculate_priority_coefficient(self, user_id: int) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from decimal import Decimal

        base_coefficient = Decimal('1.0')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal –≤–º–µ—Å—Ç–æ float
        try:
            async with self.pool.acquire() as conn:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                query = """
                    SELECT st.priorityboostvalue
                    FROM purchasedservices ps
                    JOIN servicetypes st ON ps.serviceid = st.serviceid
                    WHERE ps.usertelegramid = $1
                    AND ps.serviceenddate > NOW()
                    AND ps.paymentstatus = TRUE
                """
                rows = await conn.fetch(query, user_id)
                # –°—É–º–º–∏—Ä—É–µ–º –±–æ–Ω—É—Å—ã –æ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥
                total_boost = sum(
                    Decimal(str(row['priorityboostvalue'])) / Decimal('100.0')  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Decimal
                    for row in rows
                )
                final_coefficient = base_coefficient + total_boost
                logger.debug(f"Calculated priority coefficient for user {user_id}: {final_coefficient}")
                return float(final_coefficient)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ float –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
        except Exception as e:
            logger.error(f"Error calculating priority for user {user_id}: {e}")
            return float(base_coefficient)

    async def update_user_priority(self, user_id: int) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            new_coefficient = await self.calculate_priority_coefficient(user_id)

            async with self.pool.acquire() as conn:
                await conn.execute(
                    "UPDATE users SET profileprioritycoefficient = $1 WHERE telegramid = $2",
                    new_coefficient, user_id
                )
            return True
        except Exception as e:
            logger.error(f"Error updating priority for user {user_id}: {e}")
            return False

    async def activate_service(self, user_id: int, service_id: int) -> bool:
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —É—Å–ª—É–≥—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        logger.info(f"Activating service {service_id} for user {user_id}")
        try:
            async with self.pool.acquire() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —É—Å–ª—É–≥–∞ —Å —Ç–∞–∫–∏–º ID —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                active_service = await conn.fetchrow(
                    """
                    SELECT * FROM purchasedservices
                    WHERE usertelegramid = $1
                    AND serviceid = $2
                    AND serviceenddate > NOW()
                    AND paymentstatus = TRUE
                    """,
                    user_id,
                    service_id
                )
                if active_service:
                    logger.warning(f"User {user_id} already has active service {service_id}")
                    return False

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
                service = await self.get_service_by_id(service_id)
                if not service:
                    logger.error(f"Service {service_id} not found")
                    return False

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
                payment_id = int(datetime.now().timestamp() * 1000)

                # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Å–ª—É–≥–∏
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø serviceduration
                logger.debug(
                    f"Service duration type: {type(service['serviceduration'])}, value: {service['serviceduration']}")
                if service['serviceduration'] is None:
                    # –ï—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º 30 –¥–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    end_date = datetime.now() + timedelta(days=30)
                elif isinstance(service['serviceduration'], timedelta):
                    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ timedelta, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
                    end_date = datetime.now() + service['serviceduration']
                elif isinstance(service['serviceduration'], int):
                    # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
                    end_date = datetime.now() + timedelta(days=service['serviceduration'])
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ int
                    try:
                        days = int(service['serviceduration'])
                        end_date = datetime.now() + timedelta(days=days)
                    except (ValueError, TypeError):
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º 30 –¥–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        logger.warning(
                            f"Could not convert service duration to days: {service['serviceduration']}, using default 30 days")
                        end_date = datetime.now() + timedelta(days=30)

                logger.debug(f"Calculated end date: {end_date}")

                # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ —É—Å–ª—É–≥–∏
                # buytime –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è DEFAULT CURRENT_TIMESTAMP
                await conn.execute(
                    """
                    INSERT INTO purchasedservices (
                        usertelegramid,
                        serviceid,
                        serviceenddate,
                        paymentstatus,
                        paymentid
                    ) VALUES ($1, $2, $3, $4, $5)
                    """,
                    user_id,
                    service_id,
                    end_date,
                    True,
                    payment_id
                )

                # –ï—Å–ª–∏ —ç—Ç–æ —É—Å–ª—É–≥–∞ —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                if service['priorityboostvalue'] > 0:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    current_coefficient = await conn.fetchval(
                        "SELECT profileprioritycoefficient FROM users WHERE telegramid = $1",
                        user_id
                    )

                    if current_coefficient is None:
                        current_coefficient = Decimal('1.0')

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Decimal –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                    if not isinstance(current_coefficient, Decimal):
                        current_coefficient = Decimal(str(current_coefficient))

                    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
                    boost_value = service['priorityboostvalue'] / Decimal('100')
                    new_coefficient = current_coefficient + boost_value

                    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                    new_coefficient = new_coefficient.quantize(Decimal('0.01'))

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –Ω–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    if new_coefficient > Decimal('999.99'):
                        new_coefficient = Decimal('999.99')
                        logger.warning(f"Priority coefficient for user {user_id} capped at 999.99")

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users
                    await conn.execute(
                        """
                        UPDATE users
                        SET profileprioritycoefficient = $1
                        WHERE telegramid = $2
                        """,
                        new_coefficient,
                        user_id
                    )

                    logger.info(
                        f"Updated priority coefficient for user {user_id}: {current_coefficient} -> {new_coefficient}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞
                if service_id == 1:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ ID 1 - —ç—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞
                    await conn.execute(
                        """
                        UPDATE users
                        SET subscriptionstatus = TRUE
                        WHERE telegramid = $1
                        """,
                        user_id
                    )

                return True
        except Exception as e:
            logger.error(f"Error activating service {service_id} for user {user_id}: {e}")
            logger.exception(e)
            return False

    async def fix_priority_coefficient(self, user_id: int) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥"""
        logger.info(f"Fixing priority coefficient for user {user_id}")
        try:
            async with self.pool.acquire() as conn:
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–æ–±—ã—á–Ω–æ 1.0)
                base_coefficient = Decimal('1.0')

                # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                query = """
                SELECT COALESCE(SUM(st.priorityboostvalue / 100.0), 0) as total_coefficient
                FROM purchasedservices ps
                JOIN servicetypes st ON ps.serviceid = st.serviceid
                WHERE ps.usertelegramid = $1
                AND ps.serviceenddate > NOW()
                AND ps.paymentstatus = TRUE
                """

                try:
                    result = await conn.fetchval(query, user_id)
                    if result is None:
                        total_service_coefficient = Decimal('0')
                    else:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Decimal
                        total_service_coefficient = Decimal(str(result))
                except Exception as e:
                    logger.error(f"Error in query for priority coefficient: {e}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
                    tables = await conn.fetch(
                        """
                        SELECT table_name
                        FROM information_schema.tables
                        WHERE table_schema = 'public'
                        """
                    )
                    logger.debug(f"Available tables: {[t['table_name'] for t in tables]}")

                    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ purchasedservices —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä–∏–º –µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    if any(t['table_name'] == 'purchasedservices' for t in tables):
                        columns = await conn.fetch(
                            """
                            SELECT column_name, data_type
                            FROM information_schema.columns
                            WHERE table_name = 'purchasedservices'
                            """
                        )
                        logger.debug(f"purchasedservices columns: {columns}")

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    total_service_coefficient = Decimal('0')

                # –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
                final_coefficient = base_coefficient + total_service_coefficient

                # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                final_coefficient = final_coefficient.quantize(Decimal('0.01'))

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –Ω–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                if final_coefficient > Decimal('999.99'):
                    final_coefficient = Decimal('999.99')
                    logger.warning(f"Priority coefficient for user {user_id} capped at 999.99")

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users
                await conn.execute(
                    """
                    UPDATE users
                    SET profileprioritycoefficient = $1
                    WHERE telegramid = $2
                    """,
                    final_coefficient,
                    user_id
                )

                logger.info(f"Fixed priority coefficient for user {user_id}: {final_coefficient}")
                return True
        except Exception as e:
            logger.error(f"Error fixing priority coefficient for user {user_id}: {e}")
            logger.exception(e)
            return False

    async def update_subscription_status(self, user_id: int) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥"""
        try:
            async with self.pool.acquire() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                has_subscription = await conn.fetchval(
                    """
                    SELECT EXISTS(
                        SELECT 1 FROM purchasedservices
                        WHERE usertelegramid = $1
                        AND serviceid = 1
                        AND serviceenddate > NOW()
                        AND paymentstatus = TRUE
                    )
                    """,
                    user_id
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users
                await conn.execute(
                    """
                    UPDATE users
                    SET subscriptionstatus = $1
                    WHERE telegramid = $2
                    """,
                    has_subscription, user_id
                )

                logger.info(f"Updated subscription status to {has_subscription} for user {user_id}")
                return True
        except Exception as e:
            logger.error(f"Error updating subscription status for user {user_id}: {e}")
            return False

    async def update_all_users_priority(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info("Updating priority coefficients for all users")
        try:
            async with self.pool.acquire() as conn:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = await conn.fetch("SELECT telegramid FROM users")

                updated_count = 0
                for user in users:
                    user_id = user['telegramid']
                    success = await self.fix_priority_coefficient(user_id)
                    if success:
                        updated_count += 1

                logger.info(f"Updated priority coefficients for {updated_count}/{len(users)} users")
                return updated_count
        except Exception as e:
            logger.error(f"Error updating all users priority: {e}")
            logger.exception(e)
            return 0

    async def check_actual_policy(self, user_id: int, policyid: int):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        try:
            async with self.pool.acquire() as conn:
                res = await conn.fetchval("""SELECT EXISTS (SELECT 1
                FROM consenttopdp
                WHERE usertelegramid = $1 AND policyversionid = $2 AND consentstatus = true)""", user_id, policyid)
                logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–≥–ª–∞—Å–µ–Ω —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –ü–ö {res}')
                return bool(res)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –û–ü–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            logger.exception(e)
            return False

    async def get_actual_policy_id(self):
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –ü–ö"""
        logger.info('–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ü–ö')
        try:
            async with self.pool.acquire() as conn:
                vers, text = await conn.fetchrow("""SELECT policyversionid, consenttext
                    FROM privacypolicy
                    ORDER BY effectivedate DESC, policyversionid DESC
                    LIMIT 1;""")
                logger.info(f'–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –ü–ö {vers}')
                return int(vers), text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ü–ö: {e}")
            logger.exception(e)
            return False

    async def get_admin_pass(self, user_id):
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞"""
        logger.info('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∞')
        try:
            async with self.pool.acquire() as conn:
                password = await conn.fetchval("""SELECT password
                    FROM administrators
                    WHERE telegramid = $1;""", user_id)
                return password
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            logger.exception(e)
            return False