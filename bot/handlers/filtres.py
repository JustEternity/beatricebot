from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from bot.models.states import RegistrationStates
from bot.services.database import Database
from bot.services.city_validator import city_validator
from bot.services.encryption import CryptoService
from bot.keyboards.menus import back_to_menu_button
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
import logging
from bot.handlers.common import show_filters_menu

logger = logging.getLogger(__name__)
router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ä–æ–¥"
@router.callback_query(F.data == "filter_city")
async def filter_city_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=back_to_menu_button()
    )
    await state.set_state(RegistrationStates.SET_FILTER_CITY)

@router.message(RegistrationStates.SET_FILTER_CITY)
async def process_city_filter(message: Message, state: FSMContext, db: Database, crypto: CryptoService):
    is_valid, normalized_city = city_validator.validate_city(message.text)
    if not is_valid:
        await message.answer(
            "‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥.",
            reply_markup=back_to_menu_button()
        )
        return
        
    # –®–∏—Ñ—Ä—É–µ–º –≥–æ—Ä–æ–¥ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    encrypted_city = crypto.encrypt(normalized_city) if crypto else normalized_city
    await state.update_data(filter_city=encrypted_city)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FILTERS –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º show_filters_menu
    await state.set_state(RegistrationStates.FILTERS)
    await show_filters_menu(message, state, db, crypto)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–æ–∑—Ä–∞—Å—Ç"
@router.callback_query(F.data == "filter_age")
async def filter_age_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25-30):",
        reply_markup=back_to_menu_button()
    )
    await state.set_state(RegistrationStates.SET_FILTER_AGE)

@router.message(RegistrationStates.SET_FILTER_AGE)
async def process_age_filter(message: Message, state: FSMContext, db: Database, crypto: CryptoService):
    try:
        age_min, age_max = map(int, message.text.split('-'))
        if 18 <= age_min <= age_max <= 100:
            await state.update_data(filter_age_min=age_min, filter_age_max=age_max)
            # –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è FILTERS
            await state.set_state(RegistrationStates.FILTERS)
            await show_filters_menu(message, state, db, crypto)
        else:
            await message.answer(
                "‚ö†Ô∏è –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç",
                reply_markup=back_to_menu_button()
            )
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: 25-30",
            reply_markup=back_to_menu_button()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ç–µ—Ä–µ—Å—ã" (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Å—Ç–∞)
@router.callback_query(F.data == "filter_interests")
async def filter_interests_handler(callback: CallbackQuery, state: FSMContext, db: Database):
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    has_subscription = await db.check_user_subscription(callback.from_user.id)
    if not has_subscription:
        await callback.message.answer(
            "‚ö†Ô∏è –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π",
            reply_markup=back_to_menu_button()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç
    has_test = await db.check_existing_answers(callback.from_user.id)
    if not has_test:
        await callback.message.answer(
            "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
            reply_markup=back_to_menu_button()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
    data = await state.get_data()
    selected_interests = data.get('filter_interests', [])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    builder = InlineKeyboardBuilder()
    
    # –°–ª–æ–≤–∞—Ä—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–±–æ—Ä–∞
    interests = {
        "active": {"name": "üèÉ –ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö", "question": 2, "answer": 1},
        "travel": {"name": "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "question": 3, "answer": 1},
        "sport": {"name": "üèãÔ∏è –°–ø–æ—Ä—Ç", "question": 4, "answer": 1},
        "animals": {"name": "üê∂ –ñ–∏–≤–æ—Ç–Ω—ã–µ", "question": 5, "answer": 1},
        "art": {"name": "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "question": 6, "answer": 1},
        "parties": {"name": "üé≠ –í–µ—á–µ—Ä–∏–Ω–∫–∏", "question": 8, "answer": 2},
        "space": {"name": "üöÄ –ö–æ—Å–º–æ—Å", "question": 9, "answer": 1},
        "serious": {"name": "üíë –°–µ—Ä—å–µ–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "question": 1, "answer": 1}
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å –æ—Ç–º–µ—Ç–∫–æ–π –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    for interest_key, interest_info in interests.items():
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å –≤—ã–±—Ä–∞–Ω
        button_text = f"‚úÖ {interest_info['name']}" if interest_key in selected_interests else interest_info['name']
        builder.button(text=button_text, callback_data=f"toggle_interest_{interest_key}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"
    builder.button(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data="apply_interests")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_filters")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ 2 –≤ —Ä—è–¥, –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ)
    builder.adjust(2, 2, 2, 2, 1, 1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
@router.callback_query(F.data.startswith("toggle_interest_"))
async def toggle_interest_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∏–∑ callback_data
    interest_type = callback.data.replace("toggle_interest_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
    data = await state.get_data()
    selected_interests = data.get('filter_interests', [])
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ (–¥–æ–±–∞–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º)
    if interest_type in selected_interests:
        selected_interests.remove(interest_type)
    else:
        selected_interests.append(interest_type)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    await state.update_data(filter_interests=selected_interests)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    builder = InlineKeyboardBuilder()
    
    # –°–ª–æ–≤–∞—Ä—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–±–æ—Ä–∞
    interests = {
        "active": {"name": "üèÉ –ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö", "question": 2, "answer": 1},
        "travel": {"name": "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "question": 3, "answer": 1},
        "sport": {"name": "üèãÔ∏è –°–ø–æ—Ä—Ç", "question": 4, "answer": 1},
        "animals": {"name": "üê∂ –ñ–∏–≤–æ—Ç–Ω—ã–µ", "question": 5, "answer": 1},
        "art": {"name": "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "question": 6, "answer": 1},
        "parties": {"name": "üé≠ –í–µ—á–µ—Ä–∏–Ω–∫–∏", "question": 8, "answer": 2},
        "space": {"name": "üöÄ –ö–æ—Å–º–æ—Å", "question": 9, "answer": 1},
        "serious": {"name": "üíë –°–µ—Ä—å–µ–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "question": 1, "answer": 1}
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å –æ—Ç–º–µ—Ç–∫–æ–π –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    for interest_key, interest_info in interests.items():
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å –≤—ã–±—Ä–∞–Ω
        button_text = f"‚úÖ {interest_info['name']}" if interest_key in selected_interests else interest_info['name']
        builder.button(text=button_text, callback_data=f"toggle_interest_{interest_key}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"
    builder.button(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data="apply_interests")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_filters")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ 2 –≤ —Ä—è–¥, –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ)
    builder.adjust(2, 2, 2, 2, 1, 1)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
@router.callback_query(F.data == "apply_interests")
async def apply_interests_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto: CryptoService):
    await callback.answer("‚úÖ –§–∏–ª—å—Ç—Ä—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FILTERS
    await state.set_state(RegistrationStates.FILTERS)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
    await show_filters_menu(callback, state, db, crypto)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@router.callback_query(F.data == "reset_filters")
async def reset_filters_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto: CryptoService):
    await callback.answer("üîÑ –§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
        
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(
        filter_city='–ù–µ –∑–∞–¥–∞–Ω',  # '–ù–µ –∑–∞–¥–∞–Ω' –≤–º–µ—Å—Ç–æ None
        filter_age_min=None,
        filter_age_max=None,
        filter_interests=[],  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        filter_test_question=None,
        filter_test_answer=None
    )
        
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
    try:
        await show_filters_menu(callback, state, db, crypto)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            pass
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
            raise

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
@router.callback_query(F.data == "back_to_filters")
async def back_to_filters_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto: CryptoService):
    try:
        await callback.answer()
        await show_filters_menu(callback, state, db, crypto)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            pass
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
            raise