from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from bot.models.states import RegistrationStates
from bot.handlers.common import show_filters_menu
from bot.services.city_validator import city_validator
from bot.services.database import Database
from bot.services.encryption import CryptoService
from bot.keyboards.menus import back_to_menu_button

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ä–æ–¥"
@router.callback_query(F.data == "filter_city")
async def filter_city_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=back_to_menu_button()
    )
    await state.set_state(RegistrationStates.SET_FILTER_CITY)

@router.message(RegistrationStates.SET_FILTER_CITY)
async def process_city_filter(message: Message, state: FSMContext, db: Database, crypto: CryptoService):
    is_valid, normalized_city = city_validator.validate_city(message.text)
    if not is_valid:
        await message.answer(
            "‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥.",
            reply_markup=back_to_menu_button()
        )
        return
    
    await state.update_data(filter_city=normalized_city)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FILTERS –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º show_filters_menu
    await state.set_state(RegistrationStates.FILTERS)
    await show_filters_menu(message, state, db, crypto)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–æ–∑—Ä–∞—Å—Ç"
@router.callback_query(F.data == "filter_age")
async def filter_age_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25-30):",
        reply_markup=back_to_menu_button()
    )
    await state.set_state(RegistrationStates.SET_FILTER_AGE)

@router.message(RegistrationStates.SET_FILTER_AGE)
async def process_age_filter(message: Message, state: FSMContext, db: Database, crypto: CryptoService):
    try:
        age_min, age_max = map(int, message.text.split('-'))
        if 18 <= age_min <= age_max <= 100:
            await state.update_data(filter_age_min=age_min, filter_age_max=age_max)
            # –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è FILTERS
            await state.set_state(RegistrationStates.FILTERS)
            await show_filters_menu(message, state, db, crypto)
        else:
            await message.answer(
                "‚ö†Ô∏è –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç",
                reply_markup=back_to_menu_button()
            )
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: 25-30",
            reply_markup=back_to_menu_button()
        )

@router.callback_query(F.data == "filter_occupation")
async def filter_occupation_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ä–æ–¥ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=back_to_menu_button()
    )
    await state.set_state(RegistrationStates.SET_FILTER_OCCUPATION)
    await callback.answer()

@router.message(RegistrationStates.SET_FILTER_OCCUPATION)
async def process_occupation_filter(message: Message, state: FSMContext, db: Database, crypto: CryptoService):
    await state.update_data(filter_occupation=message.text)
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è FILTERS
    await state.set_state(RegistrationStates.FILTERS)
    await show_filters_menu(message, state, db, crypto)

@router.callback_query(F.data == "filter_goals")
async def filter_goals_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=back_to_menu_button()
    )
    await state.set_state(RegistrationStates.SET_FILTER_GOALS)
    await callback.answer()

@router.message(RegistrationStates.SET_FILTER_GOALS)
async def process_goals_filter(message: Message, state: FSMContext, db: Database, crypto: CryptoService):
    await state.update_data(filter_goals=message.text)
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è FILTERS
    await state.set_state(RegistrationStates.FILTERS)
    await show_filters_menu(message, state, db, crypto)

@router.callback_query(F.data == "reset_filters")
async def reset_filters_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto: CryptoService):
    await callback.answer("üîÑ –§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(
        filter_city=None,
        filter_age_min=None,
        filter_age_max=None,
        filter_occupation=None,
        filter_goals=None
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
    await show_filters_menu(callback, state, db, crypto)

@router.callback_query(F.data == "back_to_filters")
async def back_to_filters_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto: CryptoService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    await callback.answer()
    await state.set_state(RegistrationStates.FILTERS)
    await show_filters_menu(callback, state, db, crypto)
