from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from bot.models.states import RegistrationStates
from bot.services.city_validator import city_validator
from bot.services.database import Database
from bot.services.algorithm_sovmest import CompatibilityService
from bot.services.encryption import CryptoService
from bot.services.utils import delete_previous_messages, format_profile_text, create_media_group
from bot.keyboards.menus import compatible_navigation_keyboard, back_to_menu_button, subscription_keyboard

import logging

logger = logging.getLogger(__name__)

router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data == "find_compatible")
async def find_compatible_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto=None):
    try:
        await callback.answer()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç
        has_answers = await db.check_existing_answers(callback.from_user.id)

        if not has_answers:
            msg = await callback.message.answer(
                "‚ö†Ô∏è –î–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="take_test")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
            await state.update_data(last_message_id=msg.message_id)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        has_subscription = await db.check_user_subscription(callback.from_user.id)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        builder = InlineKeyboardBuilder()

        # –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º)
        builder.button(text="üìç –ì–æ—Ä–æ–¥", callback_data="filter_city")
        builder.button(text="üî¢ –í–æ–∑—Ä–∞—Å—Ç", callback_data="filter_age")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)
        if has_subscription:
            builder.button(text="üë´ –ü–æ–ª", callback_data="filter_gender")
            builder.button(text="üíº –†–æ–¥ –∑–∞–Ω—è—Ç–∏–π", callback_data="filter_occupation")
            builder.button(text="üéØ –¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", callback_data="filter_goals")

        builder.button(text="üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_search")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")

        builder.adjust(2)  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É

        text = "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:" if has_subscription else "‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –±–æ–ª—å—à–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤):"

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        data = await state.get_data()
        if 'last_message_id' in data:
            try:
                await callback.bot.delete_message(callback.message.chat.id, data['last_message_id'])
            except:
                pass

        msg = await callback.message.answer(
            text,
            reply_markup=builder.as_markup()
        )
        await state.update_data(last_message_id=msg.message_id)

    except Exception as e:
        logger.error(f"Error in find_compatible_handler: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_compatible_user(message: Message, state: FSMContext, db: Database, crypto=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        state_data = await state.get_data()
        current_index = state_data.get("current_compatible_index", 0)
        compatible_users = state_data.get("compatible_users", [])

        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if not compatible_users:
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤ —Ç–µ—Å—Ç–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                ])
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—à–ª–∏ –ª–∏ –º—ã –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞
        if current_index >= len(compatible_users):
            current_index = 0
            await state.update_data(current_compatible_index=current_index)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user = compatible_users[current_index]

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        user_profile = current_user['profile']
        compatibility = current_user['compatibility']

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è - –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º crypto
        profile_text = await format_profile_text(user_profile, crypto)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        profile_text += f"<b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</b> {compatibility}%"

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        photos = user_profile.get('photos', [])

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = compatible_navigation_keyboard(user_profile['telegramid'])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
        if photos:
            await message.answer_photo(
                photo=photos[0],
                caption=profile_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await message.answer(
                profile_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"Error showing compatible user: {e}")
        logger.exception(e)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.callback_query(F.data == "next_compatible")
async def next_compatible_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto=None):
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    state_data = await state.get_data()
    current_index = state_data.get("current_compatible_index", 0) + 1
    compatible_users = state_data.get("compatible_users", [])

    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
    if current_index >= len(compatible_users):
        current_index = 0

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_compatible_index=current_index)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º crypto
    await show_compatible_user(callback.message, state, db, crypto)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–∞–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith("like_user_"))
async def like_user_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto=None):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    liked_user_id = int(callback.data.split("_")[2])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∞–π–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.add_like(callback.from_user.id, liked_user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å
    is_mutual = await db.check_mutual_like(callback.from_user.id, liked_user_id)

    if is_mutual:
        # –ï—Å–ª–∏ –ª–∞–π–∫ –≤–∑–∞–∏–º–Ω—ã–π, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        await callback.answer("‚ù§Ô∏è –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.", show_alert=True)

        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        # ...
    else:
        await callback.answer("üëç –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –æ–Ω —Ç–∞–∫–∂–µ –æ—Ç–º–µ—Ç–∏—Ç –≤–∞—Å, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
                              show_alert=True)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    data = await state.get_data()
    current_index = data.get('current_compatible_index', 0)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    photo_message_ids = data.get('compatible_photo_message_ids', [])
    keyboard_message_id = data.get('compatible_keyboard_message_id')

    for msg_id in photo_message_ids:
        try:
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    if keyboard_message_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, keyboard_message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {e}")

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    await state.update_data(current_compatible_index=current_index + 1)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º crypto
    await show_compatible_user(callback.message, state, db, crypto)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@router.callback_query(F.data == "filter_city")
async def filter_city_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(RegistrationStates.SET_FILTER_CITY)
    await callback.answer()

@router.message(RegistrationStates.SET_FILTER_CITY)
async def process_city_filter(message: Message, state: FSMContext):
    is_valid, normalized_city = city_validator.validate_city(message.text)

    if not is_valid:
        await message.answer("‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –≥–æ—Ä–æ–¥")
        return

    await state.update_data(filter_city=normalized_city)
    await show_filters_menu(message, state)

@router.callback_query(F.data == "filter_age")
async def filter_age_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25-30):")
    await state.set_state(RegistrationStates.SET_FILTER_AGE)
    await callback.answer()

@router.message(RegistrationStates.SET_FILTER_AGE)
async def process_age_filter(message: Message, state: FSMContext):
    try:
        age_min, age_max = map(int, message.text.split('-'))
        if 18 <= age_min <= age_max <= 100:
            await state.update_data(filter_age_min=age_min, filter_age_max=age_max)
            await show_filters_menu(message, state)
        else:
            await message.answer("‚ö†Ô∏è –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç")
    except:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∏–º–µ—Ä: 25-30")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
@router.callback_query(F.data == "start_search")
async def start_search_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto=None):
    await callback.answer()
    await callback.message.edit_text("üîç –ò—â–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    filters = await state.get_data()

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    compatibility_service = CompatibilityService(db)

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    high_compatible_users, low_compatible_users = await compatibility_service.find_compatible_users(
        user_id=callback.from_user.id,
        city=filters.get('filter_city'),
        age_min=filters.get('filter_age_min'),
        age_max=filters.get('filter_age_max'),
        gender=filters.get('filter_gender'),
        occupation=filters.get('filter_occupation'),
        goals=filters.get('filter_goals'),
        limit=10,
        min_score=50.0
    )

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    all_compatible_users = high_compatible_users + low_compatible_users

    if not all_compatible_users:
        await callback.message.edit_text(
            "üòî –ü–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    await state.update_data(
        compatible_users=all_compatible_users,
        current_compatible_index=0
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º crypto
    await show_compatible_user(callback.message, state, db, crypto)

async def show_filters_menu(message: Message, state: FSMContext, db=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    data = await state.get_data()
    has_subscription = await db.check_user_subscription(message.from_user.id)

    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    city_text = f"üìç –ì–æ—Ä–æ–¥: {data.get('filter_city', '–ª—é–±–æ–π')}"
    age_text = f"üî¢ –í–æ–∑—Ä–∞—Å—Ç: {data.get('filter_age_min', '18')}-{data.get('filter_age_max', '100')}"

    builder.button(text=city_text, callback_data="filter_city")
    builder.button(text=age_text, callback_data="filter_age")

    if has_subscription:
        # –î–æ–ø —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        gender_text = f"üë´ –ü–æ–ª: {data.get('filter_gender', '–ª—é–±–æ–π')}"
        builder.button(text=gender_text, callback_data="filter_gender")

    builder.button(text="üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_search")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")

    builder.adjust(2)

    await message.answer(
        "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "filter_city")
async def filter_city_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(RegistrationStates.SET_FILTER_CITY)
    await callback.answer()

@router.callback_query(F.data == "filter_age")
async def filter_age_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25-30):")
    await state.set_state(RegistrationStates.SET_FILTER_AGE)
    await callback.answer()