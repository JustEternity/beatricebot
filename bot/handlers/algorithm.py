from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from bot.models.states import RegistrationStates
from bot.services.city_validator import city_validator
from bot.services.database import Database
from bot.services.algorithm_sovmest import CompatibilityService
from bot.services.encryption import CryptoService
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest
from bot.services.utils import delete_previous_messages, format_profile_text, create_media_group
from bot.keyboards.menus import compatible_navigation_keyboard, back_to_menu_button, subscription_keyboard, main_menu
import logging

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "view_services")
async def view_services_handler(callback: CallbackQuery, db, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥"""
    user_id = callback.from_user.id
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback_data: {callback.data}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.update_subscription_status(user_id)
    await db.update_user_priority(user_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–º—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üíé –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", callback_data="service_1")],
            [InlineKeyboardButton(text="üöÄ –ë—É—Å—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ 24 —á–∞—Å–∞", callback_data="service_2")],
            [InlineKeyboardButton(text="üî• –ë—É—Å—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ 7 –¥–Ω–µ–π", callback_data="service_3")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏", callback_data="my_services")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(lambda c: c.data in ["service_1", "service_2", "service_3"])
async def service_details_handler(callback: CallbackQuery, db, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ"""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback_data: {callback.data}")
    try:
        service_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —É—Å–ª—É–≥
        await db.fix_priority_coefficient(user_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        service_info = {
            1: {
                "id": 1,
                "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü",
                "cost": 299,
                "serviceduration": "30 –¥–Ω–µ–π",
                "priorityboostvalue": 50,
                "availabilitystatus": True,
                "details": "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü –¥–∞–µ—Ç –≤–∞–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ –∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
            },
            2: {
                "id": 2,
                "description": "–ë—É—Å—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ 24 —á–∞—Å–∞",
                "cost": 99,
                "serviceduration": "24 —á–∞—Å–∞",
                "priorityboostvalue": 100,
                "availabilitystatus": True,
                "details": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
            },
            3: {
                "id": 3,
                "description": "–ë—É—Å—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ 7 –¥–Ω–µ–π",
                "cost": 499,
                "serviceduration": "7 –¥–Ω–µ–π",
                "priorityboostvalue": 75,
                "availabilitystatus": True,
                "details": "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏."
            }
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è —É—Å–ª—É–≥–∞
        if service_id not in service_info:
            logger.warning(f"Service {service_id} not found")
            await callback.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        service = service_info[service_id]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ª—É–≥–µ
        message_text = (
            f"<b>üîç {service['description']}</b>\n\n"
            f"{service['details']}\n\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {service['cost']} —Ä—É–±.\n"
            f"‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {service['serviceduration']}\n"
            f"üîù <b>–ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:</b> +{service['priorityboostvalue']}%\n\n"
            f"–ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —É—Å–ª—É–≥—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–∫—É–ø–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏", callback_data=f"buy_service_{service_id}")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥", callback_data="view_services")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        )

        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in service_details handler: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith("buy_service_"))
async def buy_service_handler(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —É—Å–ª—É–≥–∏"""
    try:
        service_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —É—Å–ª—É–≥—É
        success = await db.activate_service(user_id, service_id)

        if success:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            await db.fix_priority_coefficient(user_id)
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            service = await db.get_service_by_id(service_id)
            service_name = service['description'] if service else "—É—Å–ª—É–≥–∞"

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_data = await db.get_user(user_id)
            priority_coefficient = user_data['profileprioritycoefficient'] if user_data else 1.0
            subscription_status = user_data['subscriptionstatus'] if user_data else False

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
            status_text = (
                f"‚úÖ –£—Å–ª—É–≥–∞ ¬´{service_name}¬ª —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                f"üìä –í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_coefficient:.2f}\n"
                f"üîë –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {'–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if subscription_status else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'}"
            )

            await callback.answer("‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", show_alert=True)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            await callback.message.edit_text(
                status_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –ú–æ–∏ —É—Å–ª—É–≥–∏", callback_data="my_services")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥", callback_data="view_services")]
                ])
            )
        else:
            await callback.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                show_alert=True
            )
    except Exception as e:
        logger.error(f"Error in buy_service handler: {e}")
        await callback.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—Å–ª—É–≥–∏",
            show_alert=True
        )



async def update_all_users_priority(self):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info("Updating priority coefficients for all users")
    try:
        async with self.pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await conn.fetch("SELECT telegramid FROM users")

            updated_count = 0
            for user in users:
                user_id = user['telegramid']
                success = await self.fix_priority_coefficient(user_id)
                if success:
                    updated_count += 1

            logger.info(f"Updated priority coefficients for {updated_count}/{len(users)} users")
            return updated_count
    except Exception as e:
        logger.error(f"Error updating all users priority: {e}")
        logger.exception(e)
        return 0


@router.callback_query(F.data == "my_services")
async def view_my_services(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        services = await db.get_active_services(callback.from_user.id)

        if not services:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥"
        else:
            text = "üéÅ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏:\n\n"
            for service in services:
                end_date = service['serviceenddate'].strftime("%d.%m.%Y %H:%M")
                text += (
                    f"üîπ {service['description']}\n"
                    f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: +{service['priorityboostvalue']}%\n"
                    f"   –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}\n\n"
                )

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="view_services")]
            ])
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error showing services: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å–ª—É–≥", show_alert=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def delete_message_safely(message):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await message.delete()
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

async def send_like_notification(bot, from_user_id, to_user_id, db, crypto=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –µ–≥–æ –ª–∞–π–∫–Ω—É–ª–∏"""
    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–µ –æ—Ç {from_user_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {to_user_id}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∞–π–∫–æ–≤ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∞–π–∫–∏", 
                callback_data="view_likes"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –í –º–µ–Ω—é", 
                callback_data="back_to_menu"
            )]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await bot.send_message(
            chat_id=to_user_id,
            text=f"‚ù§Ô∏è *–í–∞—Å –ª–∞–π–∫–Ω—É–ª–∏!*\n\n"
                 f"–ö—Ç–æ-—Ç–æ –æ—Ü–µ–Ω–∏–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —ç—Ç–æ?",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        return True
    except TelegramAPIError as e:
        if "bot was blocked by the user" in str(e).lower():
            logger.warning(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {to_user_id}")
        elif "chat not found" in str(e).lower():
            logger.warning(f"–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {to_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–µ: {e}")
        return False

@router.callback_query(F.data == "view_likes")
async def view_likes_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∞–π–∫–æ–≤"""
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ª–∞–π–∫–∏
        likes = await db.get_user_likes(callback.from_user.id)
        
        if not likes:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ª–∞–π–∫–æ–≤.",
                reply_markup=back_to_menu_button()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            likes_list=likes,
            current_like_index=0
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await show_like_profile(callback.message, state, db, crypto)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_likes_handler: {e}")
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∞–π–∫–æ–≤",
            reply_markup=back_to_menu_button()
        )

@router.callback_query(F.data.startswith("view_liker:"))
async def view_liker_profile_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    liker_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile = await db.get_user_profile(liker_id)
    user_photos = await db.get_user_photos(liker_id)
    
    if not user_profile:
        await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    profile_text = await format_profile_text(user_profile, crypto)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="‚ù§Ô∏è –õ–∞–π–∫–Ω—É—Ç—å –≤ –æ—Ç–≤–µ—Ç", 
            callback_data=f"like_back:{liker_id}"
        )],
        [InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
            callback_data="back_to_menu"
        )]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    await callback.message.edit_text(
        profile_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
async def show_like_profile(message: Message, state: FSMContext, db: Database, crypto=None):
    try:
        state_data = await state.get_data()
        current_index = state_data.get("current_like_index", 0)
        likes_list = state_data.get("likes_list", [])
        
        if not likes_list or current_index >= len(likes_list):
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
            try:
                if hasattr(message, 'photo') and message.photo:
                    await message.edit_caption(
                        caption="–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –ª–∞–π–∫–∏!",
                        reply_markup=back_to_menu_button()
                    )
                else:
                    await message.edit_text(
                        "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –ª–∞–π–∫–∏!",
                        reply_markup=back_to_menu_button()
                    )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                await message.answer(
                    "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –ª–∞–π–∫–∏!",
                    reply_markup=back_to_menu_button()
                )
            return

        current_like = likes_list[current_index]
        liker_id = current_like['from_user_id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ—Ç –∂–µ –ø—Ä–æ—Ñ–∏–ª—å
        if state_data.get('last_shown_profile') == liker_id:
            return

        user_profile = await db.get_user_profile(liker_id)
        if not user_profile:
            await handle_error(message, "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        profile_text = await format_profile_text(user_profile, crypto)
        keyboard = create_like_keyboard(liker_id)

        photos = await db.get_user_photos(liker_id)
        
        try:
            if hasattr(message, 'photo') and message.photo:
                if photos:
                    await message.edit_media(
                        InputMediaPhoto(media=photos[0], caption=profile_text, parse_mode="HTML"),
                        reply_markup=keyboard
                    )
                else:
                    await message.edit_caption(
                        caption=profile_text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
            else:
                if photos:
                    await message.answer_photo(
                        photos[0],
                        caption=profile_text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                else:
                    await message.answer(
                        profile_text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
            
            await db.mark_like_as_viewed(liker_id, message.from_user.id)
            await state.update_data(last_shown_profile=liker_id)
            
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                logger.debug("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            else:
                raise
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_like_profile: {e}")
        await handle_error(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")

def create_like_keyboard(liker_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ù§Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"like_back:{liker_id}"),
            InlineKeyboardButton(text="üëé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="next_like")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

async def handle_error(message: Message, text: str):
    try:
        await message.answer(text, reply_markup=back_to_menu_button())
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

@router.callback_query(F.data.startswith("skip_like:"))
async def skip_like_handler(callback: CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –ª–∞–π–∫–∞"""
    liker_id = int(callback.data.split(":")[1])
    
    # –ü–æ–º–µ—á–∞–µ–º –ª–∞–π–∫ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π
    await db.mark_like_as_viewed(liker_id, callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ª–∞–π–∫–æ–≤
    likes = await db.get_user_likes(callback.from_user.id)
    
    if likes:
        await state.update_data(likes_list=likes, current_like_index=0)
        await show_like_profile(callback.message, state, db)
    else:
        await callback.message.edit_text(
            "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –ª–∞–π–∫–∏!",
            reply_markup=back_to_menu_button()
        )
    
    await callback.answer("–õ–∞–π–∫ –ø—Ä–æ–ø—É—â–µ–Ω")

@router.callback_query(F.data == "mutual_like")
async def mutual_like_handler(callback: CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è'."""
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è'")

    state_data = await state.get_data()
    likes_list = state_data.get("likes_list", [])

    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if not likes_list:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∞–π–∫–æ–≤")
        return

    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∞–π–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
    current_like = likes_list.pop(0)
    sender_id = current_like["sendertelegramid"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–≤–∏–ª –ª–∏ –æ–Ω —Ç–æ–∂–µ –ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    mutual_like = await db.fetchval("""
        SELECT COUNT(*) FROM likes
        WHERE sendertelegramid = $1 AND receivertelegramid = $2
        AND likeviewedstatus = TRUE
    """, callback.from_user.id, sender_id)

    if mutual_like:
        await callback.answer("‚ú® –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! ‚ú®", show_alert=True)
    else:
        await callback.answer("–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ üòä")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(likes_list=likes_list)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
    if likes_list:
        await show_like_profile(callback.message, state, db)
    else:
        likes_count = await db.fetchval(
            "SELECT COUNT(*) FROM likes WHERE receivertelegramid = $1 AND likeviewedstatus = FALSE",
            callback.from_user.id
        )
        await callback.message.edit_text(
            "üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîπ",
            reply_markup=main_menu(likes_count)
        )

@router.callback_query(lambda c: c.data.startswith("dislike_user:"))
async def handle_dislike(callback: CallbackQuery, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∑–ª–∞–π–∫"""
    try:
        liker_id = int(callback.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –ª–∞–π–∫–Ω—É–≤—à–µ–≥–æ

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–∞–π–∫–æ–≤ –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
        state_data = await state.get_data()
        likes_list = state_data.get("likes_list", [])
        current_index = state_data.get("current_like_index", 0)

        # –£–¥–∞–ª—è–µ–º –ª–∞–π–∫–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
        new_likes_list = [like for like in likes_list if like['from_user_id'] != liker_id]

        if new_likes_list:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º –ª–∞–π–∫–æ–≤
            await state.update_data(likes_list=new_likes_list, current_like_index=min(current_index, len(new_likes_list) - 1))

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
            await show_like_profile(callback.message, state, db)
        else:
            # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ª–∞–π–∫–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text("–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –ª–∞–π–∫–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=back_to_menu_button())

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –¥–∏–∑–ª–∞–π–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∑–ª–∞–π–∫–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data.startswith("like_back:"))
async def like_back_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∞–π–∫–∞ –≤ –æ—Ç–≤–µ—Ç"""
    await callback.answer("‚ù§Ô∏è")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    liked_user_id = int(callback.data.split(":")[1])
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        like_id = await db.add_like(callback.from_user.id, liked_user_id)
        
        if like_id:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ª–∞–π–∫–Ω—É–ª {liked_user_id} –≤ –æ—Ç–≤–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å True, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ—Ç–≤–µ—Ç–Ω—ã–π –ª–∞–π–∫)
            is_mutual = await db.check_mutual_like(callback.from_user.id, liked_user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ
            await send_like_notification(
                callback.bot, 
                callback.from_user.id,
                liked_user_id,
                db,
                crypto
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏
            if is_mutual:
                await callback.message.answer(
                    "‚ù§Ô∏è –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ."
                )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤–∑–∞–∏–º–Ω—É—é —Å–∏–º–ø–∞—Ç–∏—é
        await show_like_profile(callback.message, state, db, crypto)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞ –≤ –æ—Ç–≤–µ—Ç: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data == "find_compatible")
async def find_compatible_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto=None):
    try:
        await callback.answer()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç
        has_answers = await db.check_existing_answers(callback.from_user.id)
        if not has_answers:
            msg = await callback.message.answer(
                "‚ö†Ô∏è –î–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="take_test")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
            await state.update_data(last_message_id=msg.message_id)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        has_subscription = await db.check_user_subscription(callback.from_user.id)
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        builder = InlineKeyboardBuilder()
        # –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º)
        builder.button(text="üìç –ì–æ—Ä–æ–¥", callback_data="filter_city")
        builder.button(text="üî¢ –í–æ–∑—Ä–∞—Å—Ç", callback_data="filter_age")
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)
        if has_subscription:
            builder.button(text="üë´ –ü–æ–ª", callback_data="filter_gender")
            builder.button(text="üíº –†–æ–¥ –∑–∞–Ω—è—Ç–∏–π", callback_data="filter_occupation")
            builder.button(text="üéØ –¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", callback_data="filter_goals")
        builder.button(text="üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_search")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        builder.adjust(2)  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
        text = "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:" if has_subscription else "‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –±–æ–ª—å—à–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤):"
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        data = await state.get_data()
        if 'last_message_id' in data:
            try:
                await callback.bot.delete_message(callback.message.chat.id, data['last_message_id'])
            except:
                pass
        
        msg = await callback.message.answer(
            text,
            reply_markup=builder.as_markup()
        )
        await state.update_data(last_message_id=msg.message_id)
    except Exception as e:
        logger.error(f"Error in find_compatible_handler: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def find_compatible_users(self, user_id: int, **filters):
    """–ü–æ–∏—Å–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_priority = await self.get_user_priority(user_id)

        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = """
            SELECT u.*, 
                   (u.profileprioritycoefficient * $1) as search_priority
            FROM users u
            WHERE u.telegramid != $2
            AND u.accountstatus = 'active'
            AND u.moderationstatus = TRUE
        """

        params = [user_priority, user_id]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if filters.get('city'):
            query += " AND u.city = $3"
            params.append(filters['city'])

        if filters.get('age_min') and filters.get('age_max'):
            query += " AND u.age BETWEEN $4 AND $5"
            params.extend([filters['age_min'], filters['age_max']])

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        query += " ORDER BY search_priority DESC, u.lastactiondate DESC"

        if filters.get('limit'):
            query += " LIMIT $6"
            params.append(filters['limit'])

        async with self.pool.acquire() as conn:
            users = await conn.fetch(query, *params)

        return [dict(user) for user in users]

    except Exception as e:
        logger.error(f"Error finding compatible users: {e}")
        return []


async def check_expired_services(self):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏"""
    try:
        async with self.pool.acquire() as conn:
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
            expired = await conn.fetch(
                "SELECT usertelegramid FROM purchasedservices "
                "WHERE serviceenddate <= NOW() AND paymentstatus = TRUE"
            )

            if not expired:
                return 0

            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏—Ö
            await conn.execute(
                "UPDATE purchasedservices SET paymentstatus = FALSE "
                "WHERE serviceenddate <= NOW() AND paymentstatus = TRUE"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for record in expired:
                await self.update_user_priority(record['usertelegramid'])

            return len(expired)

    except Exception as e:
        logger.error(f"Error checking expired services: {e}")
        return 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_compatible_user(message: Message, state: FSMContext, db: Database, crypto=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—á–∏—Å—Ç–∫–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        current_index = state_data.get("current_compatible_index", 0)
        compatible_users = state_data.get("compatible_users", [])
        last_messages = state_data.get("last_profile_messages", [])
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg_id in last_messages:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")
        
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç –ø—É—Å—Ç
        if not compatible_users:
            no_profiles_msg = await message.answer(
                "üòî –°–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=back_to_menu_button()
            )
            await state.update_data(last_profile_messages=[no_profiles_msg.message_id])
            return
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        if current_index >= len(compatible_users):
            current_index = 0
        elif current_index < 0:
            current_index = len(compatible_users) - 1
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É
        current_user = compatible_users[current_index]
        user_profile = current_user['profile']
        compatibility = current_user['compatibility']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = await format_profile_text(user_profile, crypto)
        profile_text += f"<b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</b> {compatibility}%"
        
        # –°–æ–∑–¥–∞—ë–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É - –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–µ–º False –¥–ª—è is_initial
        keyboard = compatible_navigation_keyboard(
            user_id=user_profile['telegramid'],
            is_first=current_index == 0,
            is_last=current_index == len(compatible_users) - 1,
            is_initial=False  # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–µ–º False
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        photos = user_profile.get('photos', [])
        sent_message = None
        if photos:
            sent_message = await message.answer_photo(
                photo=photos[0],
                caption=profile_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            sent_message = await message.answer(
                text=profile_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            last_profile_messages=[sent_message.message_id],
            current_compatible_index=current_index,
            current_profile_id=user_profile['telegramid'],
            is_initial_view=False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∫–∞–∑–∞
        )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ show_compatible_user: {e}", exc_info=True)
        error_msg = await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç—ã.",
            reply_markup=back_to_menu_button()
        )
        await state.update_data(last_profile_messages=[error_msg.message_id])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.callback_query(F.data == "next_compatible")
async def next_compatible_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto=None):
    await callback.answer()
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    state_data = await state.get_data()
    current_index = state_data.get("current_compatible_index", 0) + 1
    compatible_users = state_data.get("compatible_users", [])
    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
    if current_index >= len(compatible_users):
        current_index = 0
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_compatible_index=current_index)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º crypto
    await show_compatible_user(callback.message, state, db, crypto)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–∞–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith("like_user_"))
async def like_user_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∞–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer("‚ù§Ô∏è")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    liked_user_id = int(callback.data.split("_")[2])
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        like_id = await db.add_like(callback.from_user.id, liked_user_id)
        
        if like_id:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ª–∞–π–∫–Ω—É–ª {liked_user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
            is_mutual = await db.check_mutual_like(callback.from_user.id, liked_user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ
            await send_like_notification(
                callback.bot, 
                callback.from_user.id,
                liked_user_id,
                db,
                crypto
            )
            
            # –ï—Å–ª–∏ —ç—Ç–æ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–æ–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if is_mutual:
                await callback.message.answer(
                    "‚ù§Ô∏è –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(
                            text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                            url=f"tg://user?id={liked_user_id}"
                        )]
                    ])
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    current_index = state_data.get("current_compatible_index", 0)
    compatible_users = state_data.get("compatible_users", [])
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç–µ
    current_index += 1
    
    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
    if current_index >= len(compatible_users):
        current_index = 0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_compatible_index=current_index)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await delete_message_safely(callback.message)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_compatible_user(callback.message, state, db, crypto)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@router.callback_query(F.data == "filter_city")
async def filter_city_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(RegistrationStates.SET_FILTER_CITY)
    await callback.answer()

@router.message(RegistrationStates.SET_FILTER_CITY)
async def process_city_filter(message: Message, state: FSMContext):
    is_valid, normalized_city = city_validator.validate_city(message.text)
    if not is_valid:
        await message.answer("‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –≥–æ—Ä–æ–¥")
        return
    await state.update_data(filter_city=normalized_city)
    await show_filters_menu(message, state)

@router.callback_query(F.data == "filter_age")
async def filter_age_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25-30):")
    await state.set_state(RegistrationStates.SET_FILTER_AGE)
    await callback.answer()

@router.message(RegistrationStates.SET_FILTER_AGE)
async def process_age_filter(message: Message, state: FSMContext):
    try:
        age_min, age_max = map(int, message.text.split('-'))
        if 18 <= age_min <= age_max <= 100:
            await state.update_data(filter_age_min=age_min, filter_age_max=age_max)
            await show_filters_menu(message, state)
        else:
            await message.answer("‚ö†Ô∏è –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç")
    except:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∏–º–µ—Ä: 25-30")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
@router.callback_query(F.data == "start_search")
async def start_search_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto=None):
    await callback.answer()
    await callback.message.edit_text("üîç –ò—â–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    filters = await state.get_data()
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    compatibility_service = CompatibilityService(db)
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    high_compatible_users, low_compatible_users = await compatibility_service.find_compatible_users(
        user_id=callback.from_user.id,
        city=filters.get('filter_city'),
        age_min=filters.get('filter_age_min'),
        age_max=filters.get('filter_age_max'),
        gender=filters.get('filter_gender'),
        occupation=filters.get('filter_occupation'),
        goals=filters.get('filter_goals'),
        limit=10,
        min_score=50.0
    )
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    all_compatible_users = high_compatible_users + low_compatible_users
    if not all_compatible_users:
        await callback.message.edit_text(
            "üòî –ü–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
        )
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    await state.update_data(
        compatible_users=all_compatible_users,
        current_compatible_index=0
    )
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º crypto
    await show_compatible_user(callback.message, state, db, crypto)

async def show_filters_menu(message: Message, state: FSMContext, db=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    data = await state.get_data()
    has_subscription = await db.check_user_subscription(message.from_user.id)
    builder = InlineKeyboardBuilder()
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    city_text = f"üìç –ì–æ—Ä–æ–¥: {data.get('filter_city', '–ª—é–±–æ–π')}"
    age_text = f"üî¢ –í–æ–∑—Ä–∞—Å—Ç: {data.get('filter_age_min', '18')}-{data.get('filter_age_max', '100')}"
    builder.button(text=city_text, callback_data="filter_city")
    builder.button(text=age_text, callback_data="filter_age")
    if has_subscription:
        # –î–æ–ø —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        gender_text = f"üë´ –ü–æ–ª: {data.get('filter_gender', '–ª—é–±–æ–π')}"
        builder.button(text=gender_text, callback_data="filter_gender")
    builder.button(text="üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_search")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(2)
    await message.answer(
        "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:",
        reply_markup=builder.as_markup()
    )

'''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –Ω–∞ –æ–¥–Ω—É –∞–Ω–∫–µ—Ç—É'''
@router.callback_query(F.data == "prev_compatible")
async def prev_compatible_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto=None):
    await callback.answer()
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    state_data = await state.get_data()
    current_index = state_data.get("current_compatible_index", 0) - 1  # –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω–¥–µ–∫—Å
    compatible_users = state_data.get("compatible_users", [])
    # –ï—Å–ª–∏ —É—à–ª–∏ –≤ –º–∏–Ω—É—Å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–Ω–∫–µ—Ç–µ
    if current_index < 0:
        current_index = len(compatible_users) - 1
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_compatible_index=current_index)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await delete_message_safely(callback.message)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_compatible_user(callback.message, state, db, crypto)

    # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞

@router.callback_query()
async def debug_callback(callback: CallbackQuery):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback_query"""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback_data: {callback.data}")
    await callback.answer()

@router.callback_query(F.data == "next_like")
async def next_like_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ª–∞–π–∫—É"""
    await callback.answer()
    
    state_data = await state.get_data()
    current_index = state_data.get("current_like_index", 0) + 1
    likes_list = state_data.get("likes_list", [])
    
    if current_index >= len(likes_list):
        await callback.message.edit_text(
            "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –ª–∞–π–∫–∏!",
            reply_markup=back_to_menu_button()
        )
        return
    
    await state.update_data(current_like_index=current_index)
    await show_like_profile(callback.message, state, db, crypto)

@router.callback_query(F.data == "prev_like")
async def prev_like_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–∞–π–∫–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    current_index = state_data.get("current_like_index", 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ª–∞–π–∫
    if current_index > 0:
        # –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω–¥–µ–∫—Å
        current_index -= 1
        await state.update_data(current_like_index=current_index)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        await show_like_profile(callback.message, state, db, crypto)
    else:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π –ª–∞–π–∫ –≤ —Å–ø–∏—Å–∫–µ", show_alert=True)

@router.callback_query(F.data == "my_likes")
async def show_my_likes(callback: CallbackQuery, state: FSMContext, db: Database, crypto=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ù–ï–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ª–∞–π–∫–∏
        likes = await db.fetch(
            "SELECT likeid, sendertelegramid FROM likes WHERE receivertelegramid = $1 AND likeviewedstatus = FALSE",
            callback.from_user.id
        )

        if not likes:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ª–∞–π–∫–æ–≤.",
                reply_markup=back_to_menu_button()
            )
            await callback.answer()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ª–∞–π–∫–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(likes_list=likes, current_like_index=0)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await show_like_profile(callback.message, state, db, crypto)

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∞–π–∫–æ–≤: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∞–π–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_menu_button()
        )
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
