from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from bot.services.database import Database
from bot.services.algorithm_sovmest import CompatibilityService
from bot.keyboards.menus import back_to_menu_button
from bot.handlers.filtres import show_filters_menu
from bot.services.profile_service import show_compatible_user, decrypt_city
from bot.services.encryption import CryptoService
from bot.handlers.profile_edit import remove_keyboard_if_exists
import logging

logger = logging.getLogger(__name__)
router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def delete_message_safely(message):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await message.delete()
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def handle_error(message: Message, text: str):
    try:
        await message.answer(text, reply_markup=back_to_menu_button())
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data == "find_compatible")
async def find_compatible_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto: CryptoService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await remove_keyboard_if_exists(callback.message)

    try:
        await callback.answer()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç
        has_answers = await db.check_existing_answers(callback.from_user.id)
        if not has_answers:
            msg = await callback.message.answer(
                "‚ö†Ô∏è –î–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="take_test")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
            await state.update_data(last_message_id=msg.message_id)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä crypto –ø—Ä–∏ –≤—ã–∑–æ–≤–µ show_filters_menu
        await show_filters_menu(callback, state, db, crypto)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ find_compatible_handler: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.callback_query(F.data == "next_compatible")
async def next_compatible_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto=None):
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏ –¥–∞–Ω–Ω—ã–µ
    state_data = await state.get_data()
    current_index = state_data.get("current_compatible_index", 0)
    compatible_users = state_data.get("compatible_users", [])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
    view_history = state_data.get("view_history", [])
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    logger.info(f"NEXT: –ò—Å—Ç–æ—Ä–∏—è –¥–æ: {view_history}, —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: {current_index}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    if current_index not in view_history:
        view_history.append(current_index)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
    await delete_message_safely(callback.message)
    
    # –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∞–Ω–∫–µ—Ç—ã
    if current_index < len(compatible_users) - 1:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
        next_index = current_index + 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        await state.update_data(
            current_compatible_index=next_index,
            view_history=view_history,
            already_went_back=False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –≤–ø–µ—Ä–µ–¥
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        logger.info(f"NEXT: –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ: {view_history}, –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {next_index}, —Å–±—Ä–æ—à–µ–Ω —Ñ–ª–∞–≥ –≤–æ–∑–≤—Ä–∞—Ç–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await show_compatible_user(callback.message, state, db, crypto)
    else:
        # –î–û–ë–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ!",
            reply_markup=back_to_menu_button()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
@router.callback_query(F.data == "start_search")
async def start_search_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto: CryptoService):
    try:
        await callback.answer()
        search_msg = await callback.message.edit_text("üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        filters = await state.get_data()
        logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è {callback.from_user.id} —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {filters}")
        
        # –î–µ—à–∏—Ñ—Ä—É–µ–º –≥–æ—Ä–æ–¥
        city = decrypt_city(crypto, filters.get('filter_city'))
        logger.info(f"–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞: {city}")
        
        compatibility_service = CompatibilityService(db)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        selected_interests = filters.get('filter_interests', [])
        logger.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {selected_interests}")
        
        interests_mapping = {
            "active": {"question": 2, "answer": 1},
            "travel": {"question": 3, "answer": 1},
            "sport": {"question": 4, "answer": 1},
            "animals": {"question": 5, "answer": 1},
            "art": {"question": 6, "answer": 1},
            "parties": {"question": 8, "answer": 2},
            "space": {"question": 9, "answer": 1},
            "serious": {"question": 1, "answer": 1}
        }
        
        filter_test_question = None
        filter_test_answer = None
        
        if selected_interests:
            first_interest = selected_interests[0]
            if first_interest in interests_mapping:
                filter_test_question = interests_mapping[first_interest]["question"]
                filter_test_answer = interests_mapping[first_interest]["answer"]
                logger.info(f"–§–∏–ª—å—Ç—Ä –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É: –≤–æ–ø—Ä–æ—Å {filter_test_question}, –æ—Ç–≤–µ—Ç {filter_test_answer}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç
        has_answers = await db.check_existing_answers(callback.from_user.id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∏–º–µ–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç: {has_answers}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile = await db.get_user_profile(callback.from_user.id)
        if user_profile:
            logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –≤–æ–∑—Ä–∞—Å—Ç={user_profile.get('age')}, –ø–æ–ª={user_profile.get('gender')}")
        else:
            logger.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —É–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä limit, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        high_compatible_users, low_compatible_users = await compatibility_service.find_compatible_users(
            user_id=callback.from_user.id,
            city=city,
            age_min=filters.get('filter_age_min'),
            age_max=filters.get('filter_age_max'),
            gender=filters.get('filter_gender'),
            occupation=filters.get('filter_occupation'),
            goals=filters.get('filter_goals'),
            filter_test_question=filter_test_question,
            filter_test_answer=filter_test_answer,
            limit=None,  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 10 –Ω–∞ None, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            min_score=50.0,
            crypto=crypto
        )
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(high_compatible_users)} —Å –≤—ã—Å–æ–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é, {len(low_compatible_users)} —Å –Ω–∏–∑–∫–æ–π")
        
        all_compatible_users = high_compatible_users + low_compatible_users
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        try:
            await search_msg.delete()
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ: {e}")
        
        if not all_compatible_users:
            logger.warning(f"–ü–æ —Ñ–∏–ª—å—Ç—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {callback.from_user.id}")
            await callback.message.answer(
                "üòî –ü–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        await state.update_data(
            compatible_users=all_compatible_users,
            current_compatible_index=0,
            view_history=[],
            already_went_back=False,
            last_profile_messages=[]  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        )
        
        logger.info(f"START: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—É—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {len(all_compatible_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await show_compatible_user(callback.message, state, db, crypto)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_search_handler: {e}", exc_info=True)
        await callback.message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_menu_button()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –Ω–∞ –æ–¥–Ω—É –∞–Ω–∫–µ—Ç—É –≤ –ª–µ–Ω—Ç–µ –∞–Ω–∫–µ—Ç
@router.callback_query(F.data == "prev_compatible")
async def prev_compatible_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto=None):
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    current_index = state_data.get("current_compatible_index", 0)
    view_history = state_data.get("view_history", [])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    already_went_back = state_data.get("already_went_back", False)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    logger.info(f"PREV: –ò—Å—Ç–æ—Ä–∏—è –¥–æ: {view_history}, —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: {current_index}, —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–ª—Å—è: {already_went_back}")
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –µ–º—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –µ—â–µ —Ä–∞–∑
    if already_went_back:
        await callback.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω—É –∞–Ω–∫–µ—Ç—É –Ω–∞–∑–∞–¥", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∞–Ω–∫–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    if not view_history:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –≤ –≤–∞—à–µ–π –ª–µ–Ω—Ç–µ", show_alert=True)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    prev_index = None
    
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏, –±–µ—Ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
    if current_index in view_history:
        current_position = view_history.index(current_index)
        if current_position > 0:
            prev_index = view_history[current_position - 1]
    
    # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω–¥–µ–∫—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –Ω–æ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –ø—É—Å—Ç–∞, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    if prev_index is None and view_history:
        prev_index = view_history[-1]
    
    # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤—Å–µ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –Ω–µ–ª—å–∑—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
    if prev_index is None:
        await callback.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥
    await state.update_data(
        current_compatible_index=prev_index,
        already_went_back=True
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    logger.info(f"PREV: –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ: {view_history}, –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {prev_index}, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –≤–æ–∑–≤—Ä–∞—Ç–∞")
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await delete_message_safely(callback.message)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_compatible_user(callback.message, state, db, crypto)