from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from bot.services.database import Database
from bot.handlers.algorithm import delete_message_safely, show_like_profile
from bot.keyboards.menus import get_like_notification_keyboard, back_to_menu_button, main_menu

import logging

logger = logging.getLogger(__name__)
router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∞–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith("like_user_"))
async def like_user_handler(callback: CallbackQuery, state: FSMContext, db: Database, crypto=None):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
        parts = callback.data.split("_")
        user_id = int(parts[2])
        current_user_id = callback.from_user.id
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞ –æ—Ç {current_user_id} –∫ {user_id}")

        # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∞–π–∫–æ–≤
        await db.debug_likes_table(current_user_id, user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ª–∞–π–∫ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥—Ä—É–≥–æ–º—É
        like_exists = await db.check_like_exists(current_user_id, user_id)

        # –ï—Å–ª–∏ –ª–∞–π–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if not like_exists:
            # –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –≤ –º–µ—Ç–æ–¥ add_like
            like_id = await db.add_like(current_user_id, user_id, callback.bot)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ª–∞–π–∫ —Å ID: {like_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∞–π–∫–Ω—É–ª –ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reverse_like_exists = await db.check_like_exists(user_id, current_user_id)
            logger.debug(f"–û–±—Ä–∞—Ç–Ω—ã–π –ª–∞–π–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {reverse_like_exists}")
        else:
            logger.debug(f"–õ–∞–π–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∞–π–∫–æ–≤ –ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        await db.debug_likes_table(current_user_id, user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
        is_mutual = await db.check_mutual_like(current_user_id, user_id)
        logger.debug(f"–í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫: {is_mutual}")

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await delete_message_safely(callback.message)

        if is_mutual:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä–æ–≥–æ –ª–∞–π–∫–Ω—É–ª–∏
            user_profile = await db.get_user_profile(user_id)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            user_name = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è
            if user_profile and 'name' in user_profile:
                encrypted_name = user_profile['name']
                logger.debug(f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è: {encrypted_name}, —Ç–∏–ø: {type(encrypted_name)}")

                if crypto:
                    try:
                        if isinstance(encrypted_name, bytes):
                            decrypted_name = crypto.decrypt(encrypted_name)
                            logger.debug(f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è (bytes): {decrypted_name}")

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
                            if isinstance(decrypted_name, bytes):
                                user_name = decrypted_name.decode('utf-8')
                            else:
                                # –ï—Å–ª–∏ —É–∂–µ —Å—Ç—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                                user_name = decrypted_name
                        else:
                            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–º–µ–Ω–∏: {type(encrypted_name)}")
                            user_name = str(encrypted_name)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∏–º–µ–Ω–∏: {e}", exc_info=True)
                        user_name = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                else:
                    logger.warning("–û–±—ä–µ–∫—Ç crypto –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                    user_name = str(encrypted_name)

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}")

            # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            match_exists = await db.check_match_exists(current_user_id, user_id)
            if not match_exists:
                match_id = await db.create_match(current_user_id, user_id)
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–∞—Ç—á —Å ID: {match_id}")

            # –≠—Ç–æ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await callback.message.answer(
                f"‚ù§Ô∏è –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {user_name}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=f"üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç —Å {user_name}", url=f"tg://user?id={user_id}")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                ])
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –º–∞—Ç—á
            if not match_exists:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    current_user_profile = await db.get_user_profile(current_user_id)
                    current_user_name = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

                    if current_user_profile and 'name' in current_user_profile and crypto:
                        try:
                            encrypted_name = current_user_profile['name']
                            if isinstance(encrypted_name, bytes):
                                decrypted_name = crypto.decrypt(encrypted_name)
                                if isinstance(decrypted_name, bytes):
                                    current_user_name = decrypted_name.decode('utf-8')
                                else:
                                    current_user_name = decrypted_name
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await callback.bot.send_message(
                        chat_id=user_id,
                        text=f"‚ù§Ô∏è –£ –≤–∞—Å –Ω–æ–≤–∞—è –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {current_user_name}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text=f"üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç —Å {current_user_name}", url=f"tg://user?id={current_user_id}")],
                            [InlineKeyboardButton(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                        ])
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Ç—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ: {e}", exc_info=True)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = keyboard = get_like_notification_keyboard(current_user_id)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await callback.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ù§Ô∏è <b>–ö—Ç–æ-—Ç–æ –ø—Ä–æ—è–≤–∏–ª –∫ –≤–∞–º —Å–∏–º–ø–∞—Ç–∏—é!</b>\n\n"
                         f"–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?",
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–µ: {e}", exc_info=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=back_to_menu_button()
            )
        except Exception:
            pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ –ª–∞–π–∫–∞ (–º—ç—Ç—á–∞)
@router.callback_query(F.data.startswith("like_back:"))
async def like_back_handler(callback: CallbackQuery, state: FSMContext, db: Database):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
        user_id = int(callback.data.split(':')[1])

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        like_result = await db.add_like(callback.from_user.id, user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∑–∞–∏–º–Ω—ã–µ –ª–∞–π–∫–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ—Ç–≤–µ—Ç–Ω—ã–π –ª–∞–π–∫)
        mutual_like = await db.check_mutual_like(callback.from_user.id, user_id)

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏
        if mutual_like:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏ –º–µ–∂–¥—É {callback.from_user.id} –∏ {user_id}")

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user1_profile = await db.get_user_profile(callback.from_user.id)
            user2_profile = await db.get_user_profile(user_id)

            if user1_profile and user2_profile:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await callback.message.answer(
                    f"üéâ –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {user2_profile['name']}!\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ: @{user2_profile.get('username', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await callback.bot.send_message(
                        user_id,
                        f"üéâ –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å {user1_profile['name']}!\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ: @{user1_profile.get('username', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}"
                    )
                    logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ –ª–∞–π–∫–∞: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∑–ª–∞–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith("dislike_user:"))
async def dislike_user_handler(callback: CallbackQuery, state: FSMContext, db: Database):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
        user_id = int(callback.data.split(':')[1])

        # –û—Ç–º–µ—á–∞–µ–º –ª–∞–π–∫ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π
        await db.mark_likes_as_viewed(user_id, callback.from_user.id)

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.answer(
            "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ª–∞–π–∫–æ–≤",
                    callback_data="view_likes"
                )],
                [InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_menu"
                )]
            ])
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∑–ª–∞–π–∫–∞: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ (–ø—Ä–æ—Å–º–æ—Ç—Ä) –∞–Ω–∫–µ—Ç—ã
@router.callback_query(F.data.startswith("skip_like:"))
async def skip_like_handler(callback: CallbackQuery, state: FSMContext, db: Database):
    liker_id = int(callback.data.split(":")[1])

    # –ü–æ–º–µ—á–∞–µ–º –ª–∞–π–∫ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π
    await db.mark_like_as_viewed(liker_id, callback.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ª–∞–π–∫–æ–≤
    likes = await db.get_user_likes(callback.from_user.id)

    if likes:
        await state.update_data(likes_list=likes, current_like_index=0)
        await show_like_profile(callback.message, state, db)
    else:
        await callback.message.edit_text(
            "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –ª–∞–π–∫–∏!",
            reply_markup=back_to_menu_button()
        )

    await callback.answer("–õ–∞–π–∫ –ø—Ä–æ–ø—É—â–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è'
@router.callback_query(F.data == "mutual_like")
async def mutual_like_handler(callback: CallbackQuery, state: FSMContext, db: Database):
    try:
        logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è'")
        state_data = await state.get_data()
        likes_list = state_data.get("likes_list", [])
        
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if not likes_list:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∞–π–∫–æ–≤")
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∞–π–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
        current_like = likes_list.pop(0)
        sender_id = current_like["from_user_id"]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—è
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å
        await db.add_like(callback.from_user.id, sender_id, callback.bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
        is_mutual = await db.check_mutual_like(callback.from_user.id, sender_id)
        
        if is_mutual:
            await callback.answer("‚ú® –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! ‚ú®", show_alert=True)
        else:
            await callback.answer("–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ üòä")
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(likes_list=likes_list)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
        if likes_list:
            await show_like_profile(callback.message, callback.from_user.id, state, db)
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ª–∞–π–∫–æ–≤
            likes_count = await db.get_unviewed_likes_count(callback.from_user.id)
            
            await callback.message.edit_text(
                "üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîπ",
                reply_markup=main_menu(likes_count)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
