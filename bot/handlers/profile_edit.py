from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InputMediaPhoto, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.enums import ParseMode

from bot.models.states import RegistrationStates
from bot.services.database import Database
from bot.services.encryption import CryptoService
from bot.keyboards.menus import edit_profile_keyboard, view_profile, has_answers_keyboard, back_to_menu_button
from bot.services.utils import delete_previous_messages

import logging
logger = logging.getLogger(__name__)
router = Router()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "view_profile")
async def view_profile_handler(callback: CallbackQuery, state: FSMContext, crypto: CryptoService, db: Database):
    await delete_previous_messages(callback.message, state)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await db.get_user_data(callback.from_user.id)

    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    name = crypto.decrypt(user_data['name']).decode() if isinstance(crypto.decrypt(user_data['name']), bytes) else crypto.decrypt(user_data['name'])
    location = crypto.decrypt(user_data['location']).decode() if isinstance(crypto.decrypt(user_data['location']), bytes) else crypto.decrypt(user_data['location'])
    description = crypto.decrypt(user_data['description']).decode() if isinstance(crypto.decrypt(user_data['description']), bytes) else crypto.decrypt(user_data['description'])


    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã
    profile_text = (
        f"üë§ *–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:*\n\n"
        f"*–ò–º—è:* {name}\n"
        f"*–í–æ–∑—Ä–∞—Å—Ç:* {user_data['age']}\n"
        f"*–ü–æ–ª:* {user_data['gender']}\n"
        f"*–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:* {location}\n"
        f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {description}"
    )

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
    if user_data['photos']:
        # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        media_group = [
            InputMediaPhoto(
                media=photo_id,
                caption=profile_text if i == 0 else None,
                parse_mode=ParseMode.MARKDOWN
            )
            for i, photo_id in enumerate(user_data['photos'])
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π
        sent_messages = await callback.message.answer_media_group(media=media_group)
        photo_message_ids = [msg.message_id for msg in sent_messages]
        await state.update_data(profile_photo_message_ids=photo_message_ids)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=view_profile())

    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç
    else:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await callback.message.edit_text(
            text=profile_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=view_profile()  # –í–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        )

    await callback.answer()
    await state.set_state(RegistrationStates.VIEW_PROFILE)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "edit_profile")
async def edit_profile_handler(callback: CallbackQuery, state: FSMContext):
    await delete_previous_messages(callback.message, state)
    await callback.message.edit_text(
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=edit_profile_keyboard()
    )
    await callback.answer()

async def show_edit_menu(message: Message, state: FSMContext):
    await delete_previous_messages(message, state)
    await message.answer(
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=edit_profile_keyboard()
    )

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏
@router.callback_query(F.data == "edit_name")
async def edit_name_handler(callback: CallbackQuery, state: FSMContext):
    msg = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await state.update_data(edit_message_id=msg.message_id)
    await state.set_state(RegistrationStates.EDIT_NAME)
    await callback.answer()

@router.message(RegistrationStates.EDIT_NAME)
async def process_edit_name(message: Message, state: FSMContext, crypto: CryptoService, db: Database):
    encrypted_name = crypto.encrypt(message.text)

    if await db.update_user_field(message.from_user.id, name=encrypted_name):
        await message.answer(f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {message.text}!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏")

    await show_edit_menu(message, state)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
@router.callback_query(F.data == "edit_age")
async def edit_age_handler(callback: CallbackQuery, state: FSMContext):
    msg = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.update_data(edit_message_id=msg.message_id)
    await state.set_state(RegistrationStates.EDIT_AGE)
    await callback.answer()

@router.message(RegistrationStates.EDIT_AGE)
async def process_edit_age(message: Message, state: FSMContext, db: Database):
    try:
        age = int(message.text)
        if 18 <= age <= 100:
            if await db.update_user_field(message.from_user.id, age=age):
                await message.answer(f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {age}!")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞")
        else:
            await message.answer("‚ö†Ô∏è –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

    await show_edit_menu(message, state)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
@router.callback_query(F.data == "edit_location")
async def edit_location_handler(callback: CallbackQuery, state: FSMContext):
    msg = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:")
    await state.update_data(edit_message_id=msg.message_id)
    await state.set_state(RegistrationStates.EDIT_LOCATION)
    await callback.answer()

@router.message(RegistrationStates.EDIT_LOCATION)
async def process_edit_location(message: Message, state: FSMContext, crypto: CryptoService, db: Database):
    encrypted_location = crypto.encrypt(message.text)

    if await db.update_user_field(message.from_user.id, city=encrypted_location):
        await message.answer(f"‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {message.text}!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è")

    await show_edit_menu(message, state)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
@router.callback_query(F.data == "edit_description")
async def edit_description_handler(callback: CallbackQuery, state: FSMContext):
    msg = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.update_data(edit_message_id=msg.message_id)
    await state.set_state(RegistrationStates.EDIT_DESCRIPTION)
    await callback.answer()

@router.message(RegistrationStates.EDIT_DESCRIPTION)
async def process_edit_description(message: Message, state: FSMContext, crypto: CryptoService, db: Database):
    encrypted_description = crypto.encrypt(message.text)

    if await db.update_user_field(message.from_user.id, profiledescription=encrypted_description):
        await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")

    await show_edit_menu(message, state)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
@router.callback_query(F.data == "edit_photos")
async def edit_photos_handler(callback: CallbackQuery, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"))
    builder.add(KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"))
    msg = await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–º–∞–∫—Å–∏–º—É–º 3):",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.update_data(
        edit_message_id=msg.message_id,
        temp_photos=[]
    )
    await state.set_state(RegistrationStates.EDIT_PHOTOS)
    await callback.answer()

@router.message(RegistrationStates.EDIT_PHOTOS, F.photo)
async def process_edit_photos_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    temp_photos = data.get('temp_photos', [])

    if len(temp_photos) >= 3:
        await message.answer("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        return

    temp_photos.append(message.photo[-1].file_id)
    await state.update_data(temp_photos=temp_photos)

    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ"))
    builder.add(KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"))

    await message.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ ({len(temp_photos)}/3)",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

@router.message(RegistrationStates.EDIT_PHOTOS, F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def process_edit_photos_finish(message: Message, state: FSMContext, db: Database):
    data = await state.get_data()
    temp_photos = data.get('temp_photos', [])

    if not temp_photos:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        return

    if await db.update_user_photos(message.from_user.id, temp_photos):
        await message.answer("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", reply_markup=ReplyKeyboardRemove())

    await show_edit_menu(message, state)

# –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "take_test")
async def take_test_handler(callback: CallbackQuery, state: FSMContext, db: Database):
    await delete_previous_messages(callback.message, state)

    user_data = await state.get_data()

    if 'profile_photo_message_ids' in user_data and user_data['profile_photo_message_ids']:
        for msg_id in user_data['profile_photo_message_ids']:
            try:
                await callback.bot.delete_message(callback.from_user.id, msg_id)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ: {e}")

        # —É–¥–∞–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(profile_photo_message_ids=None)

    if 'profile_menu_message_id' in user_data and user_data['profile_menu_message_id']:
        try:
            await callback.bot.delete_message(callback.from_user.id, user_data['profile_menu_message_id'])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é: {e}")

        # —É–¥–∞–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(profile_menu_message_id=None)

    has_answers = await db.check_existing_answers(user_id=callback.from_user.id)

    if has_answers:
        try:
            await callback.message.edit_text(
                "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç —Ä–∞–Ω–µ–µ. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –µ–≥–æ —Å–Ω–æ–≤–∞?\n\n"
                "‚ö†Ô∏è –í–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
                reply_markup=has_answers_keyboard()
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.message.answer(
                "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç —Ä–∞–Ω–µ–µ. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –µ–≥–æ —Å–Ω–æ–≤–∞?\n\n"
                "‚ö†Ô∏è –í–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
                reply_markup=has_answers_keyboard()
            )
        return

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç —Ä–∞–Ω–µ–µ, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
    await start_test(callback, state, db)

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
@router.callback_query(F.data == "confirm_test")
async def confirm_test(callback: CallbackQuery, state: FSMContext, db: Database):
    await callback.answer()
    await start_test(callback, state, db)

@router.callback_query(lambda c: c.data.startswith("answer_"))
async def handle_test_answer(callback: CallbackQuery, state: FSMContext, db: Database):
    await process_test_answer(callback, state, db)

# –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
async def start_test(callback: CallbackQuery, state: FSMContext, db: Database):
    # —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"
    try:
        await callback.message.delete()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞
    start_message = await callback.message.answer("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–∞...")

    try:
        # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        await db.del_user_answers(callback.from_user.id)

        # –ø–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        questions_dict, answers_dict = await db.get_questions_and_answers()
        if not questions_dict or not answers_dict:
            await start_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                         reply_markup=back_to_menu_button())
            return

        # —Å–æ—Ö—Ä –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            questions=questions_dict,
            answers=answers_dict,
            current_question_index=0,
            question_ids=list(questions_dict.keys()),
            user_answers={},
            test_message_id=start_message.message_id
        )

        # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
        await state.set_state(RegistrationStates.TEST_QUESTION)
        await show_question(start_message, state, db)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞: {e}")
        await start_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                     reply_markup=back_to_menu_button())

# –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def show_question(message: Message, state: FSMContext, db: Database = None):
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    questions = data.get('questions', {})
    answers = data.get('answers', {})
    question_ids = data.get('question_ids', [])
    current_index = data.get('current_question_index', 0)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
    if current_index >= len(question_ids):
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await finish_test(message, state, db)
        return

    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    question_id = question_ids[current_index]
    question_text = questions[question_id]

    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    for answer_id, answer_text in answers[question_id].items():
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text=answer_text, callback_data=f"answer_{question_id}_{answer_id}")
        ])

    # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    try:
        await message.edit_text(
            f"–í–æ–ø—Ä–æ—Å {current_index + 1} –∏–∑ {len(question_ids)}:\n\n{question_text}",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        new_message = await message.answer(
            f"–í–æ–ø—Ä–æ—Å {current_index + 1} –∏–∑ {len(question_ids)}:\n\n{question_text}",
            reply_markup=keyboard
        )
        await state.update_data(test_message_id=new_message.message_id)

async def process_test_answer(callback: CallbackQuery, state: FSMContext, db: Database = None):
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    _, question_id, answer_id = callback.data.split('_')
    question_id, answer_id = int(question_id), int(answer_id)

    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_answers = data.get('user_answers', {})
    current_index = data.get('current_question_index', 0)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answers[question_id] = answer_id

    # –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    current_index += 1

    # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        user_answers=user_answers,
        current_question_index=current_index
    )

    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await show_question(callback.message, state, db)
    await callback.answer()

# –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ —Å–æ—Ö—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def finish_test(message: Message, state: FSMContext, db: Database):
    data = await state.get_data()
    user_answers = data.get('user_answers', {})

    try:
        # —Å–æ—Ö—Ä –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await db.save_user_answers(message.chat.id, user_answers)

        if success:
            # –æ—Ç–æ–±—Ä–∂ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞
            try:
                await message.edit_text("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã.", reply_markup=back_to_menu_button())
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
                await message.answer("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã.", reply_markup=back_to_menu_button())
        else:
            try:
                await message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞.",
                                       reply_markup=back_to_menu_button())
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞.",
                                    reply_markup=back_to_menu_button())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        try:
            await message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞.",
                                   reply_markup=back_to_menu_button())
        except Exception as e2:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e2}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞.",
                               reply_markup=back_to_menu_button())

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.set_state(RegistrationStates.MAIN_MENU)



