from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from bot.handlers.common import show_main_menu
from bot.models.states import RegistrationStates
from bot.services.city_validator import city_validator
from bot.services.database import Database
from bot.services.encryption import CryptoService
from bot.services.utils import delete_previous_messages
from bot.keyboards.menus import policy_keyboard
from bot.services.s3storage import S3Service
from bot.services.image_moderator import EnhancedContentDetector
from bot.services.text_moderator import TextModerator  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å

from io import BytesIO
import logging
import os

logger = logging.getLogger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
text_moderator = TextModerator()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext, db: Database):
    policyid, POLICY_TEXT = await db.get_actual_policy_id()
    await state.update_data(idpolicy=policyid)
    user_id = message.from_user.id
    if await db.is_user_registered(user_id):
        policy_accept = await db.check_actual_policy(user_id, policyid)
        likes_count = await db.get_unviewed_likes_count(user_id)
        if policy_accept:
            await show_main_menu(message, state, likes_count)
        else:
            await message.answer(POLICY_TEXT, reply_markup=policy_keyboard())
            await state.set_state(RegistrationStates.POLICY_SECOND_TIME)
        return
    await message.answer(POLICY_TEXT, reply_markup=policy_keyboard())
    await state.set_state(RegistrationStates.POLICY)


@router.message(RegistrationStates.POLICY_SECOND_TIME, F.text.in_(["‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", "‚ùå –Ø –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω"]))
async def policy_second_handler(message: Message, state: FSMContext, db: Database):
    if message.text == "‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω":
        await state.update_data(policy=True)
        user_data = await state.get_data()
        res = await db.save_policy_acception(message.from_user.id, user_data)
        if res:
            await message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞",
                                 reply_markup=ReplyKeyboardRemove())
            await show_main_menu(message, state)
        else:
            await message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç, –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –û–ü–î. /start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        await state.clear()


@router.message(RegistrationStates.POLICY, F.text.in_(["‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", "‚ùå –Ø –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω"]))
async def policy_handler(message: Message, state: FSMContext):
    if message.text == "‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω":
        await state.update_data(policy=True)
        await message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
        await state.set_state(RegistrationStates.NAME)
    else:
        await message.answer("üö´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. /start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        await state.clear()


@router.message(RegistrationStates.NAME)
async def name_handler(message: Message, state: FSMContext, crypto: CryptoService):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º text_moderator –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ validate_text
    is_valid, error_msg = text_moderator.validate_text(message.text)
    if not is_valid:
        await message.answer(error_msg)
        return
    await state.update_data(name=crypto.encrypt(message.text))
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {message.text}! –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    await state.set_state(RegistrationStates.AGE)


@router.message(RegistrationStates.AGE)
async def age_handler(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if 18 <= age <= 100:
            await state.update_data(age=age)
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π")]
                ],
                resize_keyboard=True
            )
            await message.answer("üéÇ –û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=keyboard)
            await state.set_state(RegistrationStates.GENDER)
        else:
            await message.answer("‚ö†Ô∏è –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


@router.message(RegistrationStates.GENDER, F.text.in_(["üë® –ú—É–∂—Å–∫–æ–π", "üë© –ñ–µ–Ω—Å–∫–∏–π"]))
async def gender_handler(message: Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegistrationStates.LOCATION)


@router.message(RegistrationStates.LOCATION)
async def location_handler(message: Message, state: FSMContext, crypto: CryptoService):
    is_valid, normalized_city = city_validator.validate_city(message.text)
    if not is_valid:
        await message.answer("‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –≥–æ—Ä–æ–¥")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    is_valid, error_msg = text_moderator.validate_text(normalized_city)
    if not is_valid:
        await message.answer(error_msg)
        return

    await state.update_data(location=crypto.encrypt(normalized_city))
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ 1-3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
    await state.set_state(RegistrationStates.PHOTOS)


@router.message(RegistrationStates.PHOTOS, F.photo | F.text)
async def photos_handler(message: Message, state: FSMContext, s3: S3Service, bot: Bot):
    data = await state.get_data()
    photos = data.get("photos", [])

    if message.photo:
        if len(photos) >= 3:
            await message.answer("‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
            return

        try:
            file_id = message.photo[-1].file_id
            file = await bot.get_file(file_id)

            file_data = BytesIO()
            await bot.download_file(file.file_path, file_data)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            temp_path = f"temp_{message.from_user.id}.jpg"
            with open(temp_path, "wb") as f:
                f.write(file_data.getbuffer())

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
            detector = EnhancedContentDetector()
            result = detector.analyze_image(temp_path)

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(temp_path)
            except:
                pass

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            if result.get('verdict') == 'üî¥ BANNED':
                violations = []
                if result['violations'].get('nudity'):
                    violations.append("üîû –æ–±–Ω–∞–∂–µ–Ω–Ω—ã–µ —Ç–µ–ª–∞/—ç—Ä–æ—Ç–∏–∫–∞")
                if result['violations'].get('drugs'):
                    violations.append("üíä –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏/–Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞")
                if result['violations'].get('weapons'):
                    violations.append("üî´ –æ—Ä—É–∂–∏–µ/–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã")
                if result['violations'].get('violence'):
                    violations.append("üí¢ –Ω–∞—Å–∏–ª–∏–µ/–∫—Ä–æ–≤—å")

                await message.answer(
                    "‚ö†Ô∏è –§–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π. –ü—Ä–∏—á–∏–Ω—ã:\n" +
                    "\n".join(violations) +
                    "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ."
                )
                return

            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –≤ S3
            file_data.seek(0)
            s3_url = await s3.upload_photo(file_data, message.from_user.id)

            if not s3_url:
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
                return

            photos.append({
                "file_id": file_id,
                "s3_url": s3_url,
                "moderation_result": result
            })

            await state.update_data(photos=photos)

            builder = ReplyKeyboardBuilder()
            builder.add(KeyboardButton(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ"))
            if len(photos) >= 1:
                builder.add(KeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))

            await message.answer(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(photos)}/3 —Ñ–æ—Ç–æ",
                reply_markup=builder.as_markup(resize_keyboard=True)
            )

        except Exception as e:
            logger.error(f"Photo upload error: {str(e)}")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

    elif message.text == "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        if not photos:
            await message.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã 1 —Ñ–æ—Ç–æ")
        else:
            await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:", reply_markup=ReplyKeyboardRemove())
            await state.set_state(RegistrationStates.DESCRIPTION)


@router.message(RegistrationStates.DESCRIPTION)
async def description_handler(message: Message, state: FSMContext, db: Database, crypto: CryptoService):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º text_moderator –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ validate_text
    is_valid, error_msg = text_moderator.validate_text(message.text)
    if not is_valid:
        await message.answer(error_msg)
        return

    user_data = await state.get_data()
    user_data["description"] = crypto.encrypt(message.text)

    if await db.save_user(
            telegram_id=message.from_user.id,
            user_data=user_data
    ):
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await show_main_menu(message, state)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear()