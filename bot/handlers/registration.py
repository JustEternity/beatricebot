from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from bot.handlers.common import show_main_menu
from bot.models.states import RegistrationStates
from bot.services.database import Database
from bot.services.encryption import CryptoService
from bot.services.utils import delete_previous_messages
from bot.keyboards.menus import policy_keyboard
from bot.texts.textforbot import POLICY_TEXT
from bot.services.s3storage import S3Service

from io import BytesIO
import logging
logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext, db: Database):
    await delete_previous_messages(message, state)

    if await db.is_user_registered(message.from_user.id):
        await show_main_menu(message, state)
        return

    await message.answer(
        POLICY_TEXT,
        reply_markup=policy_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(RegistrationStates.POLICY)

@router.message(RegistrationStates.POLICY, F.text.in_(["‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", "‚ùå –Ø –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω"]))
async def policy_handler(message: Message, state: FSMContext):
    if message.text == "‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω":
        await message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
        await state.set_state(RegistrationStates.NAME)
        logger.debug(f"User {message.from_user.id} accepted policy")
    else:
        await message.answer("üö´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. /start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        await state.clear()

@router.message(RegistrationStates.NAME)
async def name_handler(message: Message, state: FSMContext, crypto: CryptoService):
    await state.update_data(name=crypto.encrypt(message.text))
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {message.text}! –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    await state.set_state(RegistrationStates.AGE)

@router.message(RegistrationStates.AGE)
async def age_handler(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if 18 <= age <= 100:
            await state.update_data(age=age)
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π")]
                ],
                resize_keyboard=True
            )
            await message.answer("üéÇ –û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=keyboard)
            await state.set_state(RegistrationStates.GENDER)
        else:
            await message.answer("‚ö†Ô∏è –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 100 –ª–µ—Ç")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@router.message(RegistrationStates.GENDER, F.text.in_(["üë® –ú—É–∂—Å–∫–æ–π", "üë© –ñ–µ–Ω—Å–∫–∏–π"]))
async def gender_handler(message: Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegistrationStates.LOCATION)

@router.message(RegistrationStates.LOCATION)
async def location_handler(message: Message, state: FSMContext, crypto: CryptoService):
    await state.update_data(location=crypto.encrypt(message.text))
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ 1-3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
    await state.set_state(RegistrationStates.PHOTOS)

@router.message(RegistrationStates.PHOTOS, F.photo | F.text)
async def photos_handler(
    message: Message,
    state: FSMContext,
    bot: Bot,
    s3: S3Service
):
    data = await state.get_data()
    photos = data.get("photos", [])  # –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä–∏

    if message.photo:
        if len(photos) >= 3:
            await message.answer("‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ...")

        try:
            photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
            file_id = photo.file_id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
            if photo.file_size and photo.file_size > 5 * 1024 * 1024:  # 5MB
                await message.answer("‚ö†Ô∏è –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 5MB")
                return

            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
            file_data = BytesIO()
            await bot.download(file_id, destination=file_data)
            file_data.seek(0)

            s3_url = await s3.upload_photo(file_data, message.from_user.id)
            file_data.close()

            if not s3_url:
                await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
            photos.append({
                "file_id": file_id,
                "s3_url": s3_url
            })

            await state.update_data(photos=photos)

            builder = ReplyKeyboardBuilder()
            if len(photos) < 3:
                builder.add(KeyboardButton(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ"))
            builder.add(KeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))

            await message.answer(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(photos)}/3 —Ñ–æ—Ç–æ",
                reply_markup=builder.as_markup(resize_keyboard=True)
            )

        except Exception as e:
            await message.answer("üö´ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logger.error(f"Photo processing error for user {message.from_user.id}: {e}")

    elif message.text == "üì∑ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ":
        await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ")

    elif message.text == "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        if not photos:
            await message.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã 1 —Ñ–æ—Ç–æ")
            return

        await message.answer(
            "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(RegistrationStates.DESCRIPTION)

    else:
        await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")

@router.message(RegistrationStates.DESCRIPTION)
async def description_handler(
    message: Message,
    state: FSMContext,
    db: Database,
    crypto: CryptoService
):
    user_data = await state.get_data()
    user_data["description"] = crypto.encrypt(message.text)

    if await db.save_user(
        telegram_id=message.from_user.id,
        user_data=user_data
    ):
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await show_main_menu(message, state)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()