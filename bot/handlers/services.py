import logging
from typing import Dict, List, Any
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from bot.services.database import Database
from aiogram.filters import Command
from bot.services.utils import utc_to_local

router = Router()
logger = logging.getLogger(__name__)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è
logger.info("Services module loaded")

@router.message(Command("services"))
async def services_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è —É—Å–ª—É–≥"""
    logger.info(f"Services command called by user {message.from_user.id}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üíé –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", callback_data="service_1")],
            [InlineKeyboardButton(text="üöÄ –ë—É—Å—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ 24 —á–∞—Å–∞", callback_data="service_2")],
            [InlineKeyboardButton(text="üî• –ë—É—Å—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ 7 –¥–Ω–µ–π", callback_data="service_3")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏", callback_data="my_services")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )

    await message.answer(
        text="üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –î–æ–±–∞–≤—å—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ä–æ—É—Ç–µ—Ä–∞
@router.message(Command("test_services"))
async def test_services_handler(message: Message):
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è —É—Å–ª—É–≥"""
    logger.info("Test services handler called")
    await message.answer(
        "–ú–æ–¥—É–ª—å —É—Å–ª—É–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä —É—Å–ª—É–≥", callback_data="view_services")],
            [InlineKeyboardButton(text="–ú–æ–∏ —É—Å–ª—É–≥–∏", callback_data="my_services")]
        ])
    )

@router.callback_query(F.data == "view_services")
async def view_services(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥"""
    user_id = callback.from_user.id
    logger.info(f"Services: User {user_id} requested services list with callback data: {callback.data}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.update_subscription_status(user_id)
    await db.update_user_priority(user_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üíé –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", callback_data="service_1")],
            [InlineKeyboardButton(text="üöÄ –ë—É—Å—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ 24 —á–∞—Å–∞", callback_data="service_2")],
            [InlineKeyboardButton(text="üî• –ë—É—Å—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ 7 –¥–Ω–µ–π", callback_data="service_3")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏", callback_data="my_services")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )

    try:
        # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text="üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            text="üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    await callback.answer()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£—Å–ª—É–≥–∏" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
@router.callback_query(F.data == "menu_services")
async def menu_services(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–£—Å–ª—É–≥–∏' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    user_id = callback.from_user.id
    logger.info(f"User {user_id} clicked menu_services button")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.update_subscription_status(user_id)
    await db.update_user_priority(user_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üíé –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", callback_data="service_1")],
            [InlineKeyboardButton(text="üöÄ –ë—É—Å—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ 24 —á–∞—Å–∞", callback_data="service_2")],
            [InlineKeyboardButton(text="üî• –ë—É—Å—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ 7 –¥–Ω–µ–π", callback_data="service_3")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏", callback_data="my_services")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )

    try:
        await callback.message.edit_text(
            text="üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        await callback.message.answer(
            text="üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    await callback.answer()


@router.callback_query(F.data.startswith("service_"))
async def service_details(callback: CallbackQuery, db: Database, state: FSMContext):
    try:
        service_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id

        await db.fix_priority_coefficient(user_id)

        if service_id in [2, 3]:
            active_boost = await db.pool.fetchrow(
                """
                SELECT * FROM purchasedservices
                WHERE usertelegramid = $1
                AND serviceid IN (2, 3)
                AND serviceenddate > NOW()
                AND paymentstatus = TRUE
                LIMIT 1
                """,
                user_id
            )

            if active_boost:
                end_date = (utc_to_local(active_boost['serviceenddate']).strftime("%d.%m.%Y %H:%M")
                           if active_boost and active_boost['serviceenddate']
                           else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
                boost_name = "24 —á–∞—Å–∞" if active_boost['serviceid'] == 2 else "7 –¥–Ω–µ–π"

                await callback.answer(
                    f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –±—É—Å—Ç –Ω–∞ {boost_name} (–¥–æ {end_date})\n"
                    "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –±—É—Å—Ç, –ø–æ–∫–∞ —Ç–µ–∫—É—â–∏–π –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è.",
                    show_alert=True
                )
                return

        service_info = {
            1: {"id": 1, "description": "üíé –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", "cost": 299, "serviceduration": "30 –¥–Ω–µ–π", "priorityboostvalue": 1, "availabilitystatus": True, "details": "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü –¥–∞–µ—Ç –≤–∞–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ –∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."},
            2: {"id": 2, "description": "üöÄ –ë—É—Å—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ 24 —á–∞—Å–∞", "cost": 99, "serviceduration": "24 —á–∞—Å–∞", "priorityboostvalue": 3, "availabilitystatus": True, "details": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."},
            3: {"id": 3, "description": "üî• –ë—É—Å—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ 7 –¥–Ω–µ–π", "cost": 499, "serviceduration": "7 –¥–Ω–µ–π", "priorityboostvalue": 3, "availabilitystatus": True, "details": "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏."}
        }

        if service_id not in service_info:
            logger.warning(f"Service {service_id} not found")
            await callback.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        service = service_info[service_id]
        active_service = await db.pool.fetchrow(
            """
            SELECT * FROM purchasedservices
            WHERE usertelegramid = $1
            AND serviceid = $2
            AND serviceenddate > NOW()
            AND paymentstatus = TRUE
            """,
            user_id, service_id
        )

        message_text = (
            f"<b>üîç {service['description']}</b>\n\n"
            f"{service['details']}\n\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {service['cost']} —Ä—É–±.\n"
            f"‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {service['serviceduration']}\n"
            f"üîù <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:</b> {float(service['priorityboostvalue']):.2f}\n"
        )

        if active_service:
            end_date = (utc_to_local(active_service['serviceenddate']).strftime("%d.%m.%Y %H:%M")
                       if active_service and active_service['serviceenddate']
                       else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            message_text += (
                f"\n\n‚ö†Ô∏è <b>–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —ç—Ç–∞ —É—Å–ª—É–≥–∞!</b>\n"
                f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}"
            )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ú–æ–∏ —É—Å–ª—É–≥–∏", callback_data="my_services")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥", callback_data="view_services")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        ) if active_service else InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏", callback_data=f"buy_service_{service_id}")],
                [InlineKeyboardButton(text="üìã –ú–æ–∏ —É—Å–ª—É–≥–∏", callback_data="my_services")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥", callback_data="view_services")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        )

        try:
            await callback.message.edit_text(
                text=message_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            await callback.message.answer(
                text=message_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await callback.answer()
    except Exception as e:
        logger.error(f"Error in service_details handler: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)


@router.callback_query(F.data.startswith("buy_service_"))
async def buy_service(callback: CallbackQuery, db: Database, state: FSMContext, self=None):
    try:
        service_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—É—Å—Ç—ã –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
        if service_id in [2, 3]:
            active_boost = await db.pool.fetchrow(
                """
                SELECT * FROM purchasedservices
                WHERE usertelegramid = $1
                AND serviceid IN (2, 3)
                AND serviceenddate > NOW()
                AND paymentstatus = TRUE
                LIMIT 1
                """,
                user_id
            )

            if active_boost:
                end_date = active_boost['serviceenddate'].strftime("%d.%m.%Y %H:%M")
                boost_name = "24 —á–∞—Å–∞" if active_boost['serviceid'] == 2 else "7 –¥–Ω–µ–π"

                await callback.answer(
                    f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –±—É—Å—Ç –Ω–∞ {boost_name} (–¥–æ {end_date})\n"
                    "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –±—É—Å—Ç, –ø–æ–∫–∞ —Ç–µ–∫—É—â–∏–π –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è.",
                    show_alert=True
                )
                return

        # –ü—Ä–æ–±—É–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É
        success = await db.activate_service(user_id, service_id)
        if service_id == 1 and success:
            callback.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", show_alert=True)

        if success:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            service = await db.get_service_by_id(service_id)
            service_name = service['description'] if service else "—É—Å–ª—É–≥–∞"

            # –Ø–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            await db.update_user_priority(user_id)

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_data = await db.get_user(user_id)
            priority_coefficient = user_data['profileprioritycoefficient'] if user_data else 1.0
            subscription_status = user_data['subscriptionstatus'] if user_data else False

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            status_text = (
                f"‚úÖ –£—Å–ª—É–≥–∞ ¬´{service_name}¬ª —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                f"üìä –í–∞—à —Ç–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {float(priority_coefficient):.2f}\n"
                f"üîë –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {'–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if subscription_status else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'}"
            )

            await callback.answer("‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", show_alert=True)

            try:
                await callback.message.edit_text(
                    status_text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üìã –ú–æ–∏ —É—Å–ª—É–≥–∏", callback_data="my_services")],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥", callback_data="view_services")]
                    ])
                )
            except Exception as e:
                logger.error(f"Error editing message: {e}")
                await callback.message.answer(
                    status_text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üìã –ú–æ–∏ —É—Å–ª—É–≥–∏", callback_data="my_services")],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥", callback_data="view_services")]
                    ])
                )
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            service = await db.get_service_by_id(service_id)
            service_name = service['description'] if service else "—ç—Ç–∞ —É—Å–ª—É–≥–∞"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–∫–∞—è –∂–µ —É—Å–ª—É–≥–∞
            active_services = await db.pool.fetch(
                """
                SELECT * FROM purchasedservices
                WHERE usertelegramid = $1
                AND serviceid = $2
                AND serviceenddate > NOW()
                AND paymentstatus = TRUE
                """,
                user_id, service_id
            )

            if active_services:
                end_date = utc_to_local(active_boost['serviceenddate']).strftime("%d.%m.%Y %H:%M") if active_boost and \
                                                                                                      active_boost[
                                                                                                          'serviceenddate'] else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                message = (
                    f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ª—É–≥–∞ ¬´{service_name}¬ª\n\n"
                    f"–û–Ω–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}\n\n"
                    f"–í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞."
                )
            else:
                message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

            await callback.answer(message, show_alert=True)

    except Exception as e:
        logger.error(f"Error in buy_service handler: {e}", exc_info=True)
        await callback.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—Å–ª—É–≥–∏",
            show_alert=True
        )


@router.callback_query(F.data == "my_services")
async def view_my_services(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id
        logger.debug(f"Showing services for user {user_id}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        user_data = await db.get_user(user_id)
        current_priority = float(user_data['profileprioritycoefficient']) if user_data else 1.00

        services = await db.get_user_services(user_id)
        logger.debug(f"Found {len(services)} services")

        if not services:
            text = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥"
        else:
            text = (
                "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏</b>\n\n"
                f"üåü <b>–¢–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:</b> {current_priority:.2f}\n\n"
            )
            for service in services:
                end_date = utc_to_local(service['serviceenddate']).strftime("%d.%m.%Y %H:%M") if service[
                    'serviceenddate'] else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                text += (
                    f"üîπ <b>{service['description']}</b>\n"
                    f"   ‚Ü≥ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {float(service['priorityboostvalue']):.2f}\n"
                    f"   ‚Ü≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}\n\n"
                )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="view_services")]
        ])

        try:
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            await callback.message.answer(
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        await callback.answer()
    except Exception as e:
        logger.error(f"Error showing services: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å–ª—É–≥", show_alert=True)


