from aiogram import Router, F
from aiogram.types import CallbackQuery
from bot.services.database import Database
from bot.services.utils import handle_errors
from bot.keyboards.menus import main_menu, subscription_keyboard, back_to_menu_button
import logging

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "activate_subscription")
@handle_errors
async def activate_subscription_handler(callback: CallbackQuery, db: Database, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = callback.from_user.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    has_subscription = await db.check_user_subscription(user_id)
    logger.info(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {has_subscription}")

    if has_subscription:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!", show_alert=True)
        await callback.message.edit_text(
            "üíé –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
            "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞, –≤–∫–ª—é—á–∞—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
            reply_markup=main_menu()
        )
        return

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π
    success = await db.activate_subscription(user_id, days=30)
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {success}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞—Å—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
    new_status = await db.check_user_subscription(user_id)
    logger.info(f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {new_status}")

    if success and new_status:
        await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!", show_alert=True)
        await callback.message.edit_text(
            "üíé –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
            reply_markup=main_menu()
        )
    else:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: success={success}, new_status={new_status}")

@router.callback_query(F.data == "subscription_info")
@handle_errors
async def subscription_info_handler(callback: CallbackQuery, db: Database, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    has_subscription = await db.check_user_subscription(user_id)

    if has_subscription:
        await callback.message.edit_text(
            "üíé –£ –≤–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!\n\n"
            "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
            reply_markup=back_to_menu_button()
        )
    else:
        await callback.message.edit_text(
            "üîí –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
            "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ø–æ–∏—Å–∫–∞ "
            "–∏ –¥—Ä—É–≥–∏–º –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º.",
            reply_markup=subscription_keyboard()
        )