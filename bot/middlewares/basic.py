from typing import Any, Callable, Dict, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message, CallbackQuery
from aiogram import Dispatcher

class DependencyInjectionMiddleware(BaseMiddleware):
    def __init__(self, dispatcher: Dispatcher):
        super().__init__()
        self.dispatcher = dispatcher

    async def __call__(self, handler, event, data):
        data.update(self.dispatcher.workflow_data)

        if isinstance(event, (Message, CallbackQuery)):
            user_id = event.from_user.id
            db = data.get('db')  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –ë–î –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ DI

            if db and await db.is_user_blocked(user_id):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                if isinstance(event, Message):
                    await event.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ!")
                elif isinstance(event, CallbackQuery):
                    await event.message.edit_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
                    await event.answer()
                return

        return await handler(event, data)